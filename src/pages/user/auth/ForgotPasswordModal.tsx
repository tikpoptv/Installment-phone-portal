import React, { useState, useEffect } from 'react';
import styles from './ForgotPasswordModal.module.css';
import { requestPasswordReset } from '../../../services/auth/passwordReset.service';
import { toast } from 'react-toastify';

interface ForgotPasswordModalProps {
  isOpen: boolean;
  onClose: () => void;
}

export default function ForgotPasswordModal({ isOpen, onClose }: ForgotPasswordModalProps) {
  const [email, setEmail] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState('');
  const [isSuccess, setIsSuccess] = useState(false);
  const [countdown, setCountdown] = useState(0);
  const [canResend, setCanResend] = useState(true);
  const [rateLimitCountdown, setRateLimitCountdown] = useState(0);
  const [isRateLimited, setIsRateLimited] = useState(false);

  // ‡∏ô‡∏±‡∏ö‡∏ñ‡∏≠‡∏¢‡∏´‡∏•‡∏±‡∏á
  useEffect(() => {
    let timer: number;
    if (countdown > 0) {
      timer = setTimeout(() => {
        setCountdown(countdown - 1);
      }, 1000);
    } else {
      setCanResend(true);
    }
    return () => clearTimeout(timer);
  }, [countdown]);

  // ‡∏ô‡∏±‡∏ö‡∏ñ‡∏≠‡∏¢‡∏´‡∏•‡∏±‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö rate limit
  useEffect(() => {
    let timer: number;
    if (rateLimitCountdown > 0) {
      timer = setTimeout(() => {
        setRateLimitCountdown(rateLimitCountdown - 1);
      }, 1000);
    } else {
      setIsRateLimited(false);
    }
    return () => clearTimeout(timer);
  }, [rateLimitCountdown]);

  // Format ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡πá‡∏ô mm:ss
  const formatTime = (seconds: number) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
  };

  // ‡πÅ‡∏¢‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° error
  const extractTimeFromError = (errorMessage: string): number => {
    const timeMatch = errorMessage.match(/(\d+)\s*‡∏ô‡∏≤‡∏ó‡∏µ\s*(\d+)\s*‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ/);
    if (timeMatch) {
      const minutes = parseInt(timeMatch[1]);
      const seconds = parseInt(timeMatch[2]);
      return minutes * 60 + seconds;
    }
    
    // ‡∏Å‡∏£‡∏ì‡∏µ‡∏°‡∏µ‡πÅ‡∏Ñ‡πà‡∏ô‡∏≤‡∏ó‡∏µ
    const minuteMatch = errorMessage.match(/(\d+)\s*‡∏ô‡∏≤‡∏ó‡∏µ/);
    if (minuteMatch) {
      const minutes = parseInt(minuteMatch[1]);
      return minutes * 60;
    }
    
    // ‡∏Å‡∏£‡∏ì‡∏µ‡∏°‡∏µ‡πÅ‡∏Ñ‡πà‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    const secondMatch = errorMessage.match(/(\d+)\s*‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ/);
    if (secondMatch) {
      const seconds = parseInt(secondMatch[1]);
      return seconds;
    }
    
    return 0;
  };

  const handleRequestReset = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!email) {
      setError('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏µ‡πÄ‡∏°‡∏•');
      return;
    }

    setIsLoading(true);
    setError('');

    try {
      await requestPasswordReset(email);
      setIsSuccess(true);
      setCountdown(300); // 5 ‡∏ô‡∏≤‡∏ó‡∏µ = 300 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
      setCanResend(false);
      setIsRateLimited(false);
      setRateLimitCountdown(0);
      toast.success('‡∏™‡πà‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏•‡πâ‡∏ß');
    } catch (err: unknown) {
      let msg = '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•';
      let isRateLimitError = false;
      
      if (err && typeof err === 'object') {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö error response
        if ('status' in err && err.status === 429) {
          isRateLimitError = true;
          if ('error' in err && typeof err.error === 'string') {
            msg = err.error;
            const waitTime = extractTimeFromError(err.error);
            if (waitTime > 0) {
              setRateLimitCountdown(waitTime);
              setIsRateLimited(true);
            }
          } else {
            msg = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡∏Å‡πà‡∏≠‡∏ô‡∏Ç‡∏≠‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà';
            setRateLimitCountdown(300); // 5 ‡∏ô‡∏≤‡∏ó‡∏µ default
            setIsRateLimited(true);
          }
        } else if ('message' in err && typeof err.message === 'string') {
          msg = err.message;
        } else if ('error' in err && typeof err.error === 'string') {
          msg = err.error;
        }
      }
      
      setError(msg);
      if (isRateLimitError) {
        toast.error('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡∏Å‡πà‡∏≠‡∏ô‡∏Ç‡∏≠‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà');
      } else {
        toast.error(msg);
      }
    } finally {
      setIsLoading(false);
    }
  };

  const handleResendEmail = async () => {
    if (!canResend || countdown > 0 || isRateLimited) return;

    setIsLoading(true);
    setError('');

    try {
      await requestPasswordReset(email);
      setCountdown(300); // 5 ‡∏ô‡∏≤‡∏ó‡∏µ = 300 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
      setCanResend(false);
      setIsRateLimited(false);
      setRateLimitCountdown(0);
      toast.success('‡∏™‡πà‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡πâ‡∏ß');
    } catch (err: unknown) {
      let msg = '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•';
      let isRateLimitError = false;
      
      if (err && typeof err === 'object') {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö error response
        if ('status' in err && err.status === 429) {
          isRateLimitError = true;
          if ('error' in err && typeof err.error === 'string') {
            msg = err.error;
            const waitTime = extractTimeFromError(err.error);
            if (waitTime > 0) {
              setRateLimitCountdown(waitTime);
              setIsRateLimited(true);
            }
          } else {
            msg = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡∏Å‡πà‡∏≠‡∏ô‡∏Ç‡∏≠‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà';
            setRateLimitCountdown(300); // 5 ‡∏ô‡∏≤‡∏ó‡∏µ default
            setIsRateLimited(true);
          }
        } else if ('message' in err && typeof err.message === 'string') {
          msg = err.message;
        } else if ('error' in err && typeof err.error === 'string') {
          msg = err.error;
        }
      }
      
      setError(msg);
      if (isRateLimitError) {
        toast.error('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡∏Å‡πà‡∏≠‡∏ô‡∏Ç‡∏≠‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà');
      } else {
        toast.error(msg);
      }
    } finally {
      setIsLoading(false);
    }
  };

  const handleClose = () => {
    onClose();
    // Reset form
    setEmail('');
    setError('');
    setIsSuccess(false);
    setCountdown(0);
    setCanResend(true);
    setIsRateLimited(false);
    setRateLimitCountdown(0);
  };

  const handleTryAgain = () => {
    setEmail('');
    setError('');
    setIsSuccess(false);
    setCountdown(0);
    setCanResend(true);
    setIsRateLimited(false);
    setRateLimitCountdown(0);
  };

  if (!isOpen) return null;

  return (
    <div className={styles.modalOverlay} onClick={handleClose}>
      <div className={styles.modalContent} onClick={(e) => e.stopPropagation()}>
        <button className={styles.closeButton} onClick={handleClose} aria-label="‡∏õ‡∏¥‡∏î">
          √ó
        </button>
        
        <div className={styles.modalHeader}>
          <h2 className={styles.title}>‡∏•‡∏∑‡∏°‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô</h2>
        </div>

        {error && <div className={styles.error}>{error}</div>}

        {!isSuccess ? (
          <form onSubmit={handleRequestReset} className={styles.form}>
            <div className={styles.inputGroup}>
              <label htmlFor="email">‡∏≠‡∏µ‡πÄ‡∏°‡∏•</label>
              <input
                type="email"
                id="email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì"
                required
                className={styles.input}
              />
            </div>
            
            <div className={styles.description}>
              ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏™‡πà‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
            </div>

            <button 
              type="submit" 
              className={styles.submitButton}
              disabled={isLoading || isRateLimited}
            >
              {isLoading ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á...' : '‡∏™‡πà‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô'}
            </button>

            {isRateLimited && rateLimitCountdown > 0 && (
              <div className={styles.rateLimitContainer}>
                <p className={styles.rateLimitText}>
                  ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠: <span className={styles.rateLimitTimer}>{formatTime(rateLimitCountdown)}</span>
                </p>
              </div>
            )}
          </form>
        ) : (
          <div className={styles.successContainer}>
            <div className={styles.successIcon}>üìß</div>
            <h3 className={styles.successTitle}>‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!</h3>
            <p className={styles.successMessage}>
              ‡πÄ‡∏£‡∏≤‡πÑ‡∏î‡πâ‡∏™‡πà‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏• <strong>{email}</strong> ‡πÅ‡∏•‡πâ‡∏ß
            </p>
            <div className={styles.successSteps}>
              <p>üìã ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏õ:</p>
              <ol>
                <li>‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì (‡∏£‡∏ß‡∏°‡∏ñ‡∏∂‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå Spam)</li>
                <li>‡∏Ñ‡∏•‡∏¥‡∏Å‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÉ‡∏ô‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô</li>
                <li>‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡∏∞‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô</li>
              </ol>
            </div>
            <div className={styles.successNote}>
              <p>üí° <strong>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:</strong> ‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏à‡∏∞‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏ô 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á</p>
            </div>
            
            <div className={styles.resendSection}>
              {countdown > 0 ? (
                <div className={styles.countdownContainer}>
                  <p className={styles.countdownText}>
                    ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ô: <span className={styles.countdownTimer}>{formatTime(countdown)}</span>
                  </p>
                  <button 
                    type="button" 
                    className={styles.resendButtonDisabled}
                    disabled
                  >
                    ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÉ‡∏´‡∏°‡πà
                  </button>
                </div>
              ) : (
                <button 
                  type="button" 
                  className={styles.tryAgainButton}
                  onClick={handleResendEmail}
                  disabled={isLoading || isRateLimited}
                >
                  {isLoading ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á...' : '‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÉ‡∏´‡∏°‡πà'}
                </button>
              )}
            </div>

            <button 
              type="button" 
              className={styles.backToFormButton}
              onClick={handleTryAgain}
            >
              ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏≠‡∏µ‡πÄ‡∏°‡∏•
            </button>
          </div>
        )}
      </div>
    </div>
  );
} 