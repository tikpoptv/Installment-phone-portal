import type { FC } from 'react';
import { useState, useEffect, useCallback } from 'react';
import { toast } from 'sonner';
import styles from './ReportsModal.module.css';
import MobileAccessModal from '../../../../../components/MobileAccessModal';
import {
  REPORT_TYPES,
  DATE_RANGE_OPTIONS,
  EXPORT_FORMATS,
  type ReportType,
  type DateRangeOption,
  type DateRange,
  type ReportFilters,
  type ExportFormat,
  generateReport,
  previewReport,
  getReportHistory,
  deleteReport,
  downloadReportFromHistory,
  createDateRangeFromOption,
  downloadBlob,
  generateFilename,
  type ReportHistoryItem,
  type PreviewResponse,
  generateReportData
} from '../../../../../services/reports.service';

// Feature Flags ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
const REPORT_FEATURE_FLAGS = {
  REPORTS_SYSTEM_ENABLED: true, // ‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  SALES_REPORTS_ENABLED: true, // ‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢
  FINANCIAL_REPORTS_ENABLED: true, // ‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô
  CUSTOMER_REPORTS_ENABLED: true, // ‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
  INVENTORY_REPORTS_ENABLED: true, // ‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
  OPERATIONAL_REPORTS_ENABLED: true, // ‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏á‡∏≤‡∏ô
  REPORT_HISTORY_ENABLED: true, // ‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
  REPORT_PREVIEW_ENABLED: true, // ‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
  REPORT_EXPORT_ENABLED: true, // ‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
  CONSIGNMENT_SUMMARY_ENABLED: false, // ‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ù‡∏≤‡∏Å‡∏Ç‡∏≤‡∏¢
  COMMISSION_SUMMARY_ENABLED: false, // ‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏£‡∏∏‡∏õ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏≠‡∏°‡∏°‡∏¥‡∏ä‡∏ä‡∏±‡∏ô
  DEFAULT_CONTRACTS_ENABLED: false, // ‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ó‡∏µ‡πà‡∏ú‡∏¥‡∏î‡∏ô‡∏±‡∏î
} as const;

interface ReportsModalProps {
  open: boolean;
  onClose: () => void;
}

interface ReportCategory {
  id: string;
  title: string;
  icon: string;
  color: string;
  reports: Array<{
    id: ReportType;
    title: string;
    description: string;
    icon: string;
  }>;
}

const reportCategories: ReportCategory[] = [
  {
    id: 'sales',
    title: '‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢',
    icon: 'üìà',
    color: '#10B981',
    reports: [
      {
        id: REPORT_TYPES.SALES_SUMMARY,
        title: '‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏ß‡∏°',
        description: '‡∏î‡∏π‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î',
        icon: 'üìä'
      },
      {
        id: REPORT_TYPES.SALES_BY_PERIOD,
        title: '‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤',
        description: '‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô, ‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå, ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô',
        icon: 'üìÖ'
      },
      {
        id: REPORT_TYPES.SALES_BY_PRODUCT,
        title: '‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏£‡∏∏‡πà‡∏ô‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå',
        description: '‡∏î‡∏π‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏∏‡πà‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤',
        icon: 'üì±'
      },
      {
        id: REPORT_TYPES.SALES_BY_ADMIN,
        title: '‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô',
        description: '‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ú‡∏•‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏ô',
        icon: 'üë§'
      },
      {
        id: REPORT_TYPES.SALES_BY_PAYMENT_METHOD,
        title: '‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏ß‡∏¥‡∏ò‡∏µ‡∏ä‡∏≥‡∏£‡∏∞',
        description: '‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô',
        icon: 'üí≥'
      }
    ]
  },
  {
    id: 'financial',
    title: '‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô',
    icon: 'üí∞',
    color: '#F59E0B',
    reports: [
      {
        id: REPORT_TYPES.REVENUE_SUMMARY,
        title: '‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ',
        description: '‡∏î‡∏π‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏£‡∏ß‡∏°‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î',
        icon: 'üíµ'
      },
      {
        id: REPORT_TYPES.PAYMENT_COLLECTION,
        title: '‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏á‡∏¥‡∏ô',
        description: '‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞',
        icon: 'üè¶'
      },
      {
        id: REPORT_TYPES.OUTSTANDING_BALANCE,
        title: '‡∏¢‡∏≠‡∏î‡∏Ñ‡πâ‡∏≤‡∏á‡∏ä‡∏≥‡∏£‡∏∞',
        description: '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏¢‡∏≠‡∏î‡∏Ñ‡πâ‡∏≤‡∏á‡∏ä‡∏≥‡∏£‡∏∞‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î',
        icon: '‚ö†Ô∏è'
      },
      {
        id: REPORT_TYPES.PROFIT_LOSS,
        title: '‡∏Å‡∏≥‡πÑ‡∏£-‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô',
        description: '‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ú‡∏•‡∏Å‡∏≥‡πÑ‡∏£‡πÅ‡∏•‡∏∞‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô',
        icon: 'üìä'
      },
      {
        id: REPORT_TYPES.CASH_FLOW,
        title: '‡∏Å‡∏£‡∏∞‡πÅ‡∏™‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î',
        description: '‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡πÑ‡∏´‡∏•‡∏Ç‡∏≠‡∏á‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î',
        icon: 'üí∏'
      }
    ]
  },
  {
    id: 'customers',
    title: '‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤',
    icon: 'üë•',
    color: '#EF4444',
    reports: [
      {
        id: REPORT_TYPES.CUSTOMER_SUMMARY,
        title: '‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤',
        description: '‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î',
        icon: 'üë§'
      },
      {
        id: REPORT_TYPES.CUSTOMER_BY_LOCATION,
        title: '‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà',
        description: '‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ï‡∏≤‡∏°‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ',
        icon: 'üó∫Ô∏è'
      },
      {
        id: REPORT_TYPES.CUSTOMER_VERIFICATION_STATUS,
        title: '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤',
        description: '‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤',
        icon: '‚úÖ'
      },
      {
        id: REPORT_TYPES.CUSTOMER_PAYMENT_HISTORY,
        title: '‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤',
        description: '‡∏î‡∏π‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤',
        icon: 'üìã'
      }
    ]
  },
  {
    id: 'inventory',
    title: '‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤',
    icon: 'üì¶',
    color: '#8B5CF6',
    reports: [
      {
        id: REPORT_TYPES.INVENTORY_SUMMARY,
        title: '‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠',
        description: '‡∏î‡∏π‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î',
        icon: 'üì¶'
      },
      {
        id: REPORT_TYPES.PRODUCT_PERFORMANCE,
        title: '‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤',
        description: '‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤',
        icon: 'üìä'
      },
      {
        id: REPORT_TYPES.ICLOUD_STATUS_REPORT,
        title: '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ iCloud',
        description: '‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ iCloud ‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤',
        icon: '‚òÅÔ∏è'
      },
      {
        id: REPORT_TYPES.CONSIGNMENT_SUMMARY,
        title: '‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ù‡∏≤‡∏Å‡∏Ç‡∏≤‡∏¢',
        description: '‡∏î‡∏π‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ù‡∏≤‡∏Å‡∏Ç‡∏≤‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î',
        icon: 'ü§ù'
      }
    ]
  },
  {
    id: 'operational',
    title: '‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏á‡∏≤‡∏ô',
    icon: '‚öôÔ∏è',
    color: '#06B6D4',
    reports: [
      {
        id: REPORT_TYPES.CONTRACT_STATUS_SUMMARY,
        title: '‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏±‡∏ç‡∏ç‡∏≤',
        description: '‡∏î‡∏π‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î',
        icon: 'üìÑ'
      },
      {
        id: REPORT_TYPES.DEFAULT_CONTRACTS,
        title: '‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ó‡∏µ‡πà‡∏ú‡∏¥‡∏î‡∏ô‡∏±‡∏î',
        description: '‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ó‡∏µ‡πà‡∏ú‡∏¥‡∏î‡∏ô‡∏±‡∏î‡∏ä‡∏≥‡∏£‡∏∞',
        icon: 'üö®'
      },
      {
        id: REPORT_TYPES.COMMISSION_SUMMARY,
        title: '‡∏™‡∏£‡∏∏‡∏õ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏≠‡∏°‡∏°‡∏¥‡∏ä‡∏ä‡∏±‡∏ô',
        description: '‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏≠‡∏°‡∏°‡∏¥‡∏ä‡∏ä‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô',
        icon: 'üíº'
      },
      {
        id: REPORT_TYPES.AUDIT_LOGS,
        title: '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á',
        description: '‡∏î‡∏π‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö',
        icon: 'üìù'
      }
    ]
  }
];

const ReportsModal: FC<ReportsModalProps> = ({ open, onClose }) => {
  const [selectedCategory, setSelectedCategory] = useState<string>('sales');
  const [selectedReport, setSelectedReport] = useState<ReportType | null>(null);
  const [dateRangeOption, setDateRangeOption] = useState<DateRangeOption>(DATE_RANGE_OPTIONS.THIS_MONTH);
  const [customDateRange, setCustomDateRange] = useState<DateRange>({
    startDate: new Date().toISOString().split('T')[0],
    endDate: new Date().toISOString().split('T')[0]
  });
  const [filters] = useState<ReportFilters>({});
  const [exportFormat, setExportFormat] = useState<ExportFormat>(EXPORT_FORMATS.EXCEL);
  const [isGenerating, setIsGenerating] = useState(false);
  const [isPreviewing, setIsPreviewing] = useState(false);
  const [previewData, setPreviewData] = useState<PreviewResponse | null>(null);
  const [previewResponseInfo, setPreviewResponseInfo] = useState<{
    status: number;
    headers: Record<string, string>;
    timestamp: string;
  } | null>(null);
  const [reportHistory, setReportHistory] = useState<ReportHistoryItem[]>([]);
  const [currentPage] = useState(1);
  const [selectedReportDetails, setSelectedReportDetails] = useState<ReportHistoryItem | null>(null);
  const [showMobileModal, setShowMobileModal] = useState(false);

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠
  const isMobile = () => {
    return window.innerWidth <= 768;
  };

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î modal
  useEffect(() => {
    if (open && isMobile()) {
      setShowMobileModal(true);
    }
  }, [open]);

  const handleMobileCancel = () => {
    setShowMobileModal(false);
    onClose();
  };

  const loadReportHistory = useCallback(async () => {
    try {
      const response = await getReportHistory({
        page: currentPage,
        limit: 10
      });
      setReportHistory(response.reports);
    } catch (error) {
      console.error('Error loading report history:', error);
      toast.error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ');
    }
  }, [currentPage]);

  useEffect(() => {
    if (open) {
      loadReportHistory();
    }
  }, [open, loadReportHistory]);

  // ‡∏ñ‡πâ‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
  if (!REPORT_FEATURE_FLAGS.REPORTS_SYSTEM_ENABLED) {
    return (
      <div className={styles.overlay}>
        <div className={styles.modal}>
          <div className={styles.header}>
            <h2 className={styles.title}>‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô</h2>
            <button className={styles.closeButton} onClick={onClose}>
              <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" className={styles.closeIcon}>
                <path fillRule="evenodd" d="M5.47 5.47a.75.75 0 011.06 0L12 10.94l5.47-5.47a.75.75 0 111.06 1.06L13.06 12l5.47 5.47a.75.75 0 11-1.06 1.06L12 13.06l-5.47 5.47a.75.75 0 01-1.06-1.06L10.94 12 5.47 6.53a.75.75 0 010-1.06z" clipRule="evenodd" />
              </svg>
            </button>
          </div>
          <div className={styles.content}>
            <div className={styles.featureDisabled}>
              <div className={styles.disabledIcon}>üö´</div>
              <h3>‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô</h3>
              <p>‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ö‡∏≥‡∏£‡∏∏‡∏á‡∏£‡∏±‡∏Å‡∏©‡∏≤</p>
              <p>‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÉ‡∏ô‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á</p>
            </div>
          </div>
        </div>
      </div>
    );
  }

  const handleReportSelect = (reportId: ReportType) => {
    // Log ‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
    console.log('üìä ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô:', {
      reportId,
      timestamp: new Date().toISOString(),
      featureFlags: {
        reportsSystemEnabled: REPORT_FEATURE_FLAGS.REPORTS_SYSTEM_ENABLED,
        salesReportsEnabled: REPORT_FEATURE_FLAGS.SALES_REPORTS_ENABLED,
        financialReportsEnabled: REPORT_FEATURE_FLAGS.FINANCIAL_REPORTS_ENABLED,
        customerReportsEnabled: REPORT_FEATURE_FLAGS.CUSTOMER_REPORTS_ENABLED,
        inventoryReportsEnabled: REPORT_FEATURE_FLAGS.INVENTORY_REPORTS_ENABLED,
        operationalReportsEnabled: REPORT_FEATURE_FLAGS.OPERATIONAL_REPORTS_ENABLED
      }
    });

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö feature flags ‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
    const isReportEnabled = (() => {
      switch (reportId) {
        case REPORT_TYPES.SALES_SUMMARY:
        case REPORT_TYPES.SALES_BY_PERIOD:
        case REPORT_TYPES.SALES_BY_PRODUCT:
        case REPORT_TYPES.SALES_BY_ADMIN:
        case REPORT_TYPES.SALES_BY_PAYMENT_METHOD:
          return REPORT_FEATURE_FLAGS.SALES_REPORTS_ENABLED;
        
        case REPORT_TYPES.REVENUE_SUMMARY:
        case REPORT_TYPES.PAYMENT_COLLECTION:
        case REPORT_TYPES.OUTSTANDING_BALANCE:
        case REPORT_TYPES.PROFIT_LOSS:
        case REPORT_TYPES.CASH_FLOW:
          return REPORT_FEATURE_FLAGS.FINANCIAL_REPORTS_ENABLED;
        
        case REPORT_TYPES.CUSTOMER_SUMMARY:
        case REPORT_TYPES.CUSTOMER_BY_LOCATION:
        case REPORT_TYPES.CUSTOMER_VERIFICATION_STATUS:
        case REPORT_TYPES.CUSTOMER_PAYMENT_HISTORY:
          return REPORT_FEATURE_FLAGS.CUSTOMER_REPORTS_ENABLED;
        
        case REPORT_TYPES.INVENTORY_SUMMARY:
        case REPORT_TYPES.PRODUCT_PERFORMANCE:
        case REPORT_TYPES.ICLOUD_STATUS_REPORT:
          return REPORT_FEATURE_FLAGS.INVENTORY_REPORTS_ENABLED;
        
        case REPORT_TYPES.CONSIGNMENT_SUMMARY:
          return REPORT_FEATURE_FLAGS.CONSIGNMENT_SUMMARY_ENABLED;
        
        case REPORT_TYPES.CONTRACT_STATUS_SUMMARY:
          return REPORT_FEATURE_FLAGS.OPERATIONAL_REPORTS_ENABLED;
        
        case REPORT_TYPES.DEFAULT_CONTRACTS:
          return REPORT_FEATURE_FLAGS.DEFAULT_CONTRACTS_ENABLED;
        
        case REPORT_TYPES.COMMISSION_SUMMARY:
          return REPORT_FEATURE_FLAGS.COMMISSION_SUMMARY_ENABLED;
        
        case REPORT_TYPES.AUDIT_LOGS:
          return REPORT_FEATURE_FLAGS.OPERATIONAL_REPORTS_ENABLED;
        
        default:
          return true;
      }
    })();

    if (!isReportEnabled) {
      toast.error('‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ');
      console.log('‚ùå ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:', reportId);
      return;
    }

    setSelectedReport(reportId);
    setPreviewData(null);
    
    console.log('‚úÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', reportId);
  };

  const handleDateRangeChange = (option: DateRangeOption) => {
    setDateRangeOption(option);
    if (option !== DATE_RANGE_OPTIONS.CUSTOM) {
      setCustomDateRange(createDateRangeFromOption(option));
    }
  };

  const getCurrentDateRange = (): DateRange => {
    if (dateRangeOption === DATE_RANGE_OPTIONS.CUSTOM) {
      return customDateRange;
    }
    return createDateRangeFromOption(dateRangeOption);
  };

  const handlePreview = async () => {
    if (!selectedReport) {
      toast.error('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô');
      return;
    }

    setIsPreviewing(true);
    try {
      const dateRange = getCurrentDateRange();
      const startTime = new Date();
      
      const previewResponse = await previewReport({
        reportType: selectedReport,
        dateRange,
        filters,
        format: 'preview',
        includeCharts: false,
        language: 'th',
        timezone: 'Asia/Bangkok'
      });
      
      const endTime = new Date();
      const responseTime = endTime.getTime() - startTime.getTime();
      
      setPreviewData(previewResponse);
      setPreviewResponseInfo({
        status: 200,
        headers: {
          'Content-Type': 'application/json',
          'X-Response-Time': `${responseTime}ms`
        },
        timestamp: endTime.toISOString()
      });
      
      toast.success('‡∏î‡∏π‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    } catch (error) {
      console.error('Error previewing report:', error);
      toast.error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏π‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ');
      setPreviewResponseInfo({
        status: 500,
        headers: {
          'Content-Type': 'application/json'
        },
        timestamp: new Date().toISOString()
      });
    } finally {
      setIsPreviewing(false);
    }
  };

  const handleGenerateReport = async () => {
    if (!selectedReport) {
      toast.error('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô');
      return;
    }

    setIsGenerating(true);
    try {
      const dateRange = getCurrentDateRange();
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      await generateReportData({
        reportType: selectedReport,
        dateRange,
        filters,
        format: 'json',
        language: 'th',
        timezone: 'Asia/Bangkok'
      });
      
      // ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå Excel
      const blob = await generateReport({
        reportType: selectedReport,
        dateRange,
        filters,
        includeCharts: false,
        format: exportFormat,
        language: 'th',
        timezone: 'Asia/Bangkok'
      });

      const filename = generateFilename(selectedReport, dateRange, exportFormat);
      downloadBlob(blob, filename);
      
      toast.success('‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô Excel ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      
      // ‡πÇ‡∏´‡∏•‡∏î‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÉ‡∏´‡∏°‡πà‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
      loadReportHistory();
    } catch (error) {
      console.error('Error generating report:', error);
      toast.error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ');
    } finally {
      setIsGenerating(false);
    }
  };

  const handleDeleteReport = async (reportId: string) => {
    if (!confirm('‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?')) return;

    try {
      await deleteReport(reportId);
      toast.success('‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      loadReportHistory();
    } catch (error) {
      console.error('Error deleting report:', error);
      toast.error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ');
    }
  };

  const handleDownloadReport = async (reportId: string) => {
    try {
      const blob = await downloadReportFromHistory(reportId);
      const filename = `report_${reportId}.xlsx`;
      downloadBlob(blob, filename);
      toast.success('‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      
      // ‡πÇ‡∏´‡∏•‡∏î‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÉ‡∏´‡∏°‡πà‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
      loadReportHistory();
    } catch (error) {
      console.error('Error downloading report:', error);
      toast.error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ');
    }
  };

  const formatFileSize = (size: string) => {
    return size || 'N/A';
  };

  const formatDate = (dateString: string) => {
    if (!dateString) return 'N/A';
    try {
      return new Date(dateString).toLocaleDateString('th-TH', {
        year: 'numeric',
        month: 'short',
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
      });
    } catch {
      return 'N/A';
    }
  };

  // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡∏¥‡∏î modal ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á MobileAccessModal ‡πÅ‡∏ó‡∏ô
  if (open && isMobile()) {
    return (
      <MobileAccessModal
        open={showMobileModal}
        mode="block"
        onCancel={handleMobileCancel}
      />
    );
  }

  // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏¥‡∏î modal ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠ ‡πÉ‡∏´‡πâ‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á‡∏≠‡∏∞‡πÑ‡∏£
  if (!open) return null;

  return (
    <div className={styles.overlay}>
      <div className={styles.modal}>
        <div className={styles.header}>
          <h2 className={styles.title}>‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô</h2>
          <button className={styles.closeButton} onClick={onClose}>
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" className={styles.closeIcon}>
              <path fillRule="evenodd" d="M5.47 5.47a.75.75 0 011.06 0L12 10.94l5.47-5.47a.75.75 0 111.06 1.06L13.06 12l5.47 5.47a.75.75 0 11-1.06 1.06L12 13.06l-5.47 5.47a.75.75 0 01-1.06-1.06L10.94 12 5.47 6.53a.75.75 0 010-1.06z" clipRule="evenodd" />
            </svg>
          </button>
        </div>

        <div className={styles.content}>
          <div className={styles.sidebar}>
            <div className={styles.categoryTabs}>
              {reportCategories.map((category) => (
                <button
                  key={category.id || `category-${Math.random()}`}
                  className={`${styles.categoryTab} ${selectedCategory === (category.id || '') ? styles.active : ''}`}
                  onClick={() => setSelectedCategory(category.id || '')}
                >
                  <span className={styles.categoryIcon}>{category.icon || 'üìÑ'}</span>
                  <span className={styles.categoryTitle}>{category.title || 'N/A'}</span>
                </button>
              ))}
            </div>

            <div className={styles.reportList}>
              <h3 className={styles.sectionTitle}>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô</h3>
              {reportCategories
                .find(cat => (cat.id || '') === selectedCategory)
                ?.reports.map((report) => {
                  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö feature flags ‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
                  const isReportEnabled = (() => {
                    switch (report.id) {
                      case REPORT_TYPES.SALES_SUMMARY:
                      case REPORT_TYPES.SALES_BY_PERIOD:
                      case REPORT_TYPES.SALES_BY_PRODUCT:
                      case REPORT_TYPES.SALES_BY_ADMIN:
                      case REPORT_TYPES.SALES_BY_PAYMENT_METHOD:
                        return REPORT_FEATURE_FLAGS.SALES_REPORTS_ENABLED;
                      
                      case REPORT_TYPES.REVENUE_SUMMARY:
                      case REPORT_TYPES.PAYMENT_COLLECTION:
                      case REPORT_TYPES.OUTSTANDING_BALANCE:
                      case REPORT_TYPES.PROFIT_LOSS:
                      case REPORT_TYPES.CASH_FLOW:
                        return REPORT_FEATURE_FLAGS.FINANCIAL_REPORTS_ENABLED;
                      
                      case REPORT_TYPES.CUSTOMER_SUMMARY:
                      case REPORT_TYPES.CUSTOMER_BY_LOCATION:
                      case REPORT_TYPES.CUSTOMER_VERIFICATION_STATUS:
                      case REPORT_TYPES.CUSTOMER_PAYMENT_HISTORY:
                        return REPORT_FEATURE_FLAGS.CUSTOMER_REPORTS_ENABLED;
                      
                      case REPORT_TYPES.INVENTORY_SUMMARY:
                      case REPORT_TYPES.PRODUCT_PERFORMANCE:
                      case REPORT_TYPES.ICLOUD_STATUS_REPORT:
                        return REPORT_FEATURE_FLAGS.INVENTORY_REPORTS_ENABLED;
                      
                      case REPORT_TYPES.CONSIGNMENT_SUMMARY:
                        return REPORT_FEATURE_FLAGS.CONSIGNMENT_SUMMARY_ENABLED;
                      
                      case REPORT_TYPES.CONTRACT_STATUS_SUMMARY:
                        return REPORT_FEATURE_FLAGS.OPERATIONAL_REPORTS_ENABLED;
                      
                      case REPORT_TYPES.DEFAULT_CONTRACTS:
                        return REPORT_FEATURE_FLAGS.DEFAULT_CONTRACTS_ENABLED;
                      
                      case REPORT_TYPES.COMMISSION_SUMMARY:
                        return REPORT_FEATURE_FLAGS.COMMISSION_SUMMARY_ENABLED;
                      
                      case REPORT_TYPES.AUDIT_LOGS:
                        return REPORT_FEATURE_FLAGS.OPERATIONAL_REPORTS_ENABLED;
                      
                      default:
                        return true;
                    }
                  })();

                  return (
                    <div
                      key={report.id || `report-${Math.random()}`}
                      className={`${styles.reportItem} ${selectedReport === (report.id || '') ? styles.selected : ''} ${!isReportEnabled ? styles.disabled : ''}`}
                      onClick={() => isReportEnabled ? handleReportSelect(report.id || '' as ReportType) : null}
                    >
                      <div className={styles.reportIcon}>
                        {report.icon || 'üìÑ'}
                        {!isReportEnabled && <span className={styles.disabledIndicator}>üö´</span>}
                      </div>
                      <div className={styles.reportInfo}>
                        <h4 className={styles.reportTitle}>
                          {report.title || 'N/A'}
                        </h4>
                        <p className={styles.reportDescription}>
                          {report.description || 'N/A'}
                        </p>
                      </div>
                      
                      {!isReportEnabled && (
                        <div className={styles.disabledOverlay}>
                          <div className={styles.disabledContent}>
                            <div className={styles.disabledRow}>
                              <div className={styles.disabledIcon}>üö´</div>
                              <div className={styles.disabledText}>‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô</div>
                            </div>
                            <div className={styles.disabledSubtext}>‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏°‡πÉ‡∏ô‡πÅ‡∏û‡πá‡∏Ñ‡πÄ‡∏Å‡∏à‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô</div>
                          </div>
                        </div>
                      )}
                    </div>
                  );
                })}
            </div>
          </div>

          <div className={styles.mainContent}>
            {selectedReport ? (
              <div className={styles.reportOptions}>
                <h3 className={styles.sectionTitle}>‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô</h3>
                
                {/* ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• */}
                <div className={styles.warningBanner}>
                  <div className={styles.warningIcon}>‚ö†Ô∏è</div>
                  <div className={styles.warningContent}>
                    <div className={styles.warningTitle}>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô</div>
                    <div className={styles.warningText}>
                      ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô 
                      ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏ô‡∏≥‡πÑ‡∏õ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
                    </div>
                  </div>
                </div>
                
                <div className={styles.optionGroup}>
                  <label className={styles.optionLabel}>‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤:</label>
                  <select 
                    className={styles.dateSelect}
                    value={dateRangeOption}
                    onChange={(e) => handleDateRangeChange(e.target.value as DateRangeOption)}
                  >
                    <option value={DATE_RANGE_OPTIONS.TODAY}>‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ</option>
                    <option value={DATE_RANGE_OPTIONS.YESTERDAY}>‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏ô</option>
                    <option value={DATE_RANGE_OPTIONS.THIS_WEEK}>‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ô‡∏µ‡πâ</option>
                    <option value={DATE_RANGE_OPTIONS.THIS_MONTH}>‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ</option>
                    <option value={DATE_RANGE_OPTIONS.LAST_MONTH}>‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß</option>
                    <option value={DATE_RANGE_OPTIONS.THIS_YEAR}>‡∏õ‡∏µ‡∏ô‡∏µ‡πâ</option>
                    <option value={DATE_RANGE_OPTIONS.LAST_YEAR}>‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß</option>
                    <option value={DATE_RANGE_OPTIONS.CUSTOM}>‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á</option>
                  </select>
                </div>

                {dateRangeOption === DATE_RANGE_OPTIONS.CUSTOM && (
                  <div className={styles.customDateRange}>
                    <div className={styles.dateInput}>
                      <label>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô:</label>
                      <input
                        type="date"
                        value={customDateRange?.startDate || ''}
                        onChange={(e) => setCustomDateRange(prev => ({ ...prev, startDate: e.target.value }))}
                      />
                    </div>
                    <div className={styles.dateInput}>
                      <label>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î:</label>
                      <input
                        type="date"
                        value={customDateRange?.endDate || ''}
                        onChange={(e) => setCustomDateRange(prev => ({ ...prev, endDate: e.target.value }))}
                      />
                    </div>
                  </div>
                )}

                <div className={styles.optionGroup}>
                  <label className={styles.optionLabel}>‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏ü‡∏•‡πå:</label>
                  <div className={styles.formatOptions}>
                    <label className={styles.formatOption}>
                      <input
                        type="radio"
                        name="format"
                        value={EXPORT_FORMATS.EXCEL}
                        checked={exportFormat === EXPORT_FORMATS.EXCEL}
                        onChange={(e) => setExportFormat(e.target.value as ExportFormat)}
                      />
                      <span className={styles.formatIcon}>üìä</span>
                      <span>Excel</span>
                    </label>
                  </div>
                </div>

                <div className={styles.actionButtons}>
                  {REPORT_FEATURE_FLAGS.REPORT_PREVIEW_ENABLED ? (
                    <button 
                      className={styles.previewButton}
                      onClick={handlePreview}
                      disabled={isPreviewing}
                    >
                      {isPreviewing ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏π‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á...' : '‡∏î‡∏π‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á'}
                    </button>
                  ) : (
                    <button 
                      className={`${styles.previewButton} ${styles.disabled}`}
                      disabled={true}
                      title="‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"
                    >
                      ‡∏î‡∏π‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á (‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô)
                    </button>
                  )}
                  
                  {REPORT_FEATURE_FLAGS.REPORT_EXPORT_ENABLED ? (
                    <button 
                      className={styles.generateButton}
                      onClick={handleGenerateReport}
                      disabled={isGenerating}
                    >
                      {isGenerating ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô...' : '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô Excel'}
                    </button>
                  ) : (
                    <button 
                      className={`${styles.generateButton} ${styles.disabled}`}
                      disabled={true}
                      title="‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"
                    >
                      ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô Excel (‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô)
                    </button>
                  )}
                </div>

                {previewData && (
                  <div className={styles.previewSection}>
                    <h4>API Response (Preview):</h4>
                    <div className={styles.apiResponse}>
                      <p><strong>URL:</strong> /api/reports/preview</p>
                      <p><strong>Method:</strong> POST</p>
                      {previewResponseInfo && (
                        <>
                          <p><strong>Status:</strong> {previewResponseInfo.status}</p>
                          <p><strong>Timestamp:</strong> {new Date(previewResponseInfo.timestamp).toLocaleString('th-TH')}</p>
                          <p><strong>Response Time:</strong> {previewResponseInfo.headers['X-Response-Time'] || 'N/A'}</p>
                        </>
                      )}
                      <p><strong>Request:</strong></p>
                      <pre className={styles.jsonDisplay}>
                        {JSON.stringify({
                          reportType: selectedReport,
                          dateRange: getCurrentDateRange(),
                          filters,
                          format: 'preview',
                          includeCharts: false,
                          language: 'th',
                          timezone: 'Asia/Bangkok'
                        }, null, 2)}
                      </pre>
                      <p><strong>Response:</strong></p>
                      <pre className={styles.jsonDisplay}>
                        {JSON.stringify(previewData, null, 2)}
                      </pre>
                    </div>
                  </div>
                )}
              </div>
            ) : (
              <div className={styles.emptyState}>
                <div className={styles.emptyIcon}>üìä</div>
                <h3>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô</h3>
                <p>‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≤‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡∏î‡πâ‡∏≤‡∏ô‡∏ã‡πâ‡∏≤‡∏¢</p>
              </div>
            )}
          </div>

          <div className={styles.historySection}>
            <div className={styles.historyHeader}>
              <h3 className={styles.sectionTitle}>‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô</h3>
            </div>

            {REPORT_FEATURE_FLAGS.REPORT_HISTORY_ENABLED ? (
              <div className={styles.historyList}>
                {reportHistory && reportHistory.length > 0 ? (
                  <>
                    <div className={styles.apiResponse}>
                      <h4>API Response (JSON):</h4>
                      <p><strong>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£:</strong> {reportHistory.length}</p>
                      <p><strong>Page:</strong> {currentPage}</p>
                      <p><strong>Limit:</strong> 10</p>
                      <p><strong>Total:</strong> {reportHistory.length}</p>
                      <p><strong>Total Pages:</strong> {Math.ceil(reportHistory.length / 10)}</p>
                    </div>
                    <h4>‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô:</h4>
                    {reportHistory.map((report) => (
                      <div key={report.reportId || `report-${Math.random()}`} className={styles.historyItem}>
                        <div className={styles.historyInfo}>
                          <div className={styles.historyHeader}>
                            <h4>ID: {report.reportId || 'N/A'}</h4>
                            <span className={styles.reportType}>{report.reportType || 'N/A'}</span>
                          </div>
                          <p>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: <span className={`${styles.status} ${styles[report.status || 'unknown']}`}>
                            {report.status === 'completed' ? '‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô' : 
                             report.status === 'processing' ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•' : '‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß'}
                          </span></p>
                          {report.createdBy && <p>‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏î‡∏¢: {report.createdBy}</p>}
                          <div className={styles.historyActions}>
                            <button 
                              className={styles.viewDetailsButton}
                              onClick={() => setSelectedReportDetails(report)}
                            >
                              ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
                            </button>
                            {report.status === 'completed' && (
                              <button 
                                className={styles.downloadButton}
                                onClick={() => {
                                  if (report.reportId) {
                                    handleDownloadReport(report.reportId);
                                  } else {
                                    toast.error('‡πÑ‡∏°‡πà‡∏û‡∏ö ID ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô');
                                  }
                                }}
                              >
                                ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î
                              </button>
                            )}
                            <button 
                              className={styles.deleteButton}
                              onClick={() => report.reportId && handleDeleteReport(report.reportId)}
                            >
                              ‡∏•‡∏ö
                            </button>
                          </div>
                        </div>
                      </div>
                    ))}
                  </>
                ) : (
                  <div className={styles.emptyHistory}>
                    <p>‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ß‡πâ</p>
                  </div>
                )}
              </div>
            ) : (
              <div className={styles.featureDisabled}>
                <div className={styles.disabledIcon}>üìã</div>
                <h3>‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô</h3>
                <p>‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ö‡∏≥‡∏£‡∏∏‡∏á‡∏£‡∏±‡∏Å‡∏©‡∏≤</p>
                <p>‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÉ‡∏ô‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á</p>
              </div>
            )}
          </div>
        </div>
      </div>

      {/* Modal ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô */}
      {selectedReportDetails && (
        <div className={styles.detailsModal}>
          <div className={styles.detailsContent}>
            <div className={styles.detailsHeader}>
              <h3>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô</h3>
              <button 
                className={styles.closeDetailsButton}
                onClick={() => setSelectedReportDetails(null)}
              >
                ‚úï
              </button>
            </div>
            <div className={styles.detailsBody}>
              <div className={styles.detailItem}>
                <strong>ID:</strong> {selectedReportDetails.reportId}
              </div>
              <div className={styles.detailItem}>
                <strong>‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó:</strong> {selectedReportDetails.reportType}
              </div>
              <div className={styles.detailItem}>
                <strong>‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠:</strong> {formatDate(selectedReportDetails.generatedAt || '')}
              </div>
              <div className={styles.detailItem}>
                <strong>‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤:</strong> {selectedReportDetails.dateRange?.startDate || 'N/A'} - {selectedReportDetails.dateRange?.endDate || 'N/A'}
              </div>
              <div className={styles.detailItem}>
                <strong>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:</strong> 
                <span className={`${styles.status} ${styles[selectedReportDetails.status || 'unknown']}`}>
                  {selectedReportDetails.status === 'completed' ? '‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô' : 
                   selectedReportDetails.status === 'processing' ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•' : '‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß'}
                </span>
              </div>
              {selectedReportDetails.createdBy && (
                <div className={styles.detailItem}>
                  <strong>‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏î‡∏¢:</strong> {selectedReportDetails.createdBy}
                </div>
              )}
              {selectedReportDetails.fileSize && (
                <div className={styles.detailItem}>
                  <strong>‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå:</strong> {formatFileSize(selectedReportDetails.fileSize)}
                </div>
              )}
              {selectedReportDetails.fileName && (
                <div className={styles.detailItem}>
                  <strong>‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå:</strong> {selectedReportDetails.fileName}
                </div>
              )}
            </div>
            <div className={styles.detailsActions}>
              {selectedReportDetails.status === 'completed' && (
                <button 
                  className={styles.downloadButton}
                  onClick={() => {
                    if (selectedReportDetails.reportId) {
                      handleDownloadReport(selectedReportDetails.reportId);
                    }
                  }}
                >
                  ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î
                </button>
              )}
              <button 
                className={styles.deleteButton}
                onClick={() => {
                  if (selectedReportDetails.reportId) {
                    handleDeleteReport(selectedReportDetails.reportId);
                    setSelectedReportDetails(null);
                  }
                }}
              >
                ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
              </button>
            </div>
          </div>
        </div>
      )}

      {showMobileModal && (
        <MobileAccessModal
          open={showMobileModal}
          mode="block"
          onCancel={handleMobileCancel}
        />
      )}
    </div>
  );
};

export default ReportsModal; 