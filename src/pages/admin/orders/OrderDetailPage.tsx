import React, { useEffect, useState } from 'react';
import { useParams, useNavigate, Link } from 'react-router-dom';
import styles from './OrderDetailPage.module.css';
import { getContractDetail, getContractPayments, getPdpaConsentFile } from '../../../services/contract.service';
import type { ContractDetail, Payment } from '../../../services/contract.service';
import PaymentDetailModal from '../payments/PaymentDetailModal';

function formatDate(dateStr: string) {
  if (!dateStr) return '-';
  const date = new Date(dateStr);
  return date.toLocaleDateString('th-TH', {
    year: 'numeric',
    month: 'short',
    day: 'numeric',
  });
}

const statusMap: Record<string, { label: string; className: string; emoji: string }> = {
  active: { label: '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô', className: styles.badgeActive, emoji: 'üü¢' },
  closed: { label: '‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß', className: styles.badgeClosed, emoji: '‚ö™Ô∏è' },
  pending: { label: '‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£', className: styles.badgePending, emoji: 'üü°' },
};

const categoryMap: Record<string, { label: string; emoji: string }> = {
  rent: { label: '‡∏ú‡πà‡∏≠‡∏ô', emoji: 'üì±' },
  buy: { label: '‡∏ã‡∏∑‡πâ‡∏≠', emoji: 'üí∏' },
  cash_purchase: { label: '‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î', emoji: 'üíµ' },
};

const OrderDetailPage: React.FC = () => {
  const { id } = useParams();
  const navigate = useNavigate();
  const [contract, setContract] = useState<ContractDetail | null>(null);
  const [payments, setPayments] = useState<Payment[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [paymentLoading, setPaymentLoading] = useState(true);
  const [paymentError, setPaymentError] = useState<string | null>(null);
  const [showPdpaModal, setShowPdpaModal] = useState(false);
  const [pdpaBlobUrl, setPdpaBlobUrl] = useState<string | null>(null);
  const [pdpaLoading, setPdpaLoading] = useState(false);
  const [pdpaError, setPdpaError] = useState<string | null>(null);
  const [showPaymentDetailModal, setShowPaymentDetailModal] = useState(false);
  const [selectedPaymentId, setSelectedPaymentId] = useState<string | null>(null);

  useEffect(() => {
    if (!id) return;
    setLoading(true);
    setError(null);
    getContractDetail(id)
      .then(data => setContract(data))
      .catch(() => setError('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠'))
      .finally(() => setLoading(false));
  }, [id]);

  useEffect(() => {
    if (!id) return;
    setPaymentLoading(true);
    setPaymentError(null);
    getContractPayments(id)
      .then(data => setPayments(data ?? []))
      .catch(() => setPaymentError('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô'))
      .finally(() => setPaymentLoading(false));
  }, [id]);

  const handleShowPdpaModal = async () => {
    setPdpaLoading(true);
    setPdpaError(null);
    setShowPdpaModal(true);
    try {
      const blob = await getPdpaConsentFile(
        contract?.id as string,
        contract?.pdpa_consent_file_filename as string
      );
      const url = URL.createObjectURL(blob);
      setPdpaBlobUrl(url);
    } catch (e) {
      setPdpaError('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ');
      console.error(e);
    } finally {
      setPdpaLoading(false);
    }
  };

  const handleClosePdpaModal = () => {
    setShowPdpaModal(false);
    if (pdpaBlobUrl) {
      URL.revokeObjectURL(pdpaBlobUrl);
    }
    setPdpaBlobUrl(null);
    setPdpaError(null);
    setPdpaLoading(false);
  };

  if (loading) return <div className={styles.container}><div className={styles.contentBox}>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</div></div>;
  if (error || !contract) return <div className={styles.container}><div className={styles.contentBox}>{error || '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠'}</div></div>;

  const o = contract;
  const status = statusMap[o.status] || { label: o.status, className: '', emoji: '' };
  const category = categoryMap[o.category] || { label: o.category, emoji: '' };

  return (
    <div className={styles.container}>
      <div className={styles.contentBox}>
        <div className={styles.topBar}>
          <button className={styles.backBtn} onClick={() => navigate(-1)} title="‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö">‚Üê</button>
          <div className={styles.title}>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠</div>
        </div>
        <div className={styles.sectionCard}>
          <div className={styles.sectionTitle}>üìù ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
            <span className={`${styles.badge} ${status.className}`}>{status.emoji} {status.label}</span>
          </div>
          <div className={styles.section}><div className={styles.label}>‡∏£‡∏´‡∏±‡∏™‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠:</div><div className={styles.value}>{o.id}</div></div>
          <div className={styles.section}><div className={styles.label}>‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà:</div><div className={styles.value}>{category.emoji} {category.label} ({o.category})</div></div>
          <div className={styles.section}><div className={styles.label}>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô:</div><div className={styles.value}>{formatDate(o.start_date)}</div></div>
          <div className={styles.section}><div className={styles.label}>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î:</div><div className={styles.value}>{formatDate(o.end_date)}</div></div>
          <div className={styles.section}><div className={styles.label}>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î:</div><div className={styles.value}>{formatDate(o.last_payment_date || '')}</div></div>
        </div>
        <div className={styles.sectionCard}>
          <div className={styles.sectionTitle}>üôç‚Äç‚ôÇÔ∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡πà‡∏≤</div>
          <div className={styles.section}><div className={styles.label}>‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•:</div><div className={styles.value}>{o.user ? `${o.user.first_name} ${o.user.last_name}` : '-'}</div></div>
          <div className={styles.section}><div className={styles.label}>‡∏£‡∏´‡∏±‡∏™‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ:</div><div className={styles.value}>{o.user ? o.user.id : '-'}</div></div>
          {o.user && <Link className={styles.linkBtn} to={`/admin/customers/${o.user.id}`}>‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡πà‡∏≤</Link>}
        </div>
        <div className={styles.sectionCard}>
          <div className={styles.sectionTitle}>üì¶ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</div>
          <div className={styles.section}><div className={styles.label}>‡∏ä‡∏∑‡πà‡∏≠‡∏£‡∏∏‡πà‡∏ô:</div><div className={styles.value}>{o.product ? o.product.model_name : '-'}</div></div>
          <div className={styles.section}><div className={styles.label}>IMEI:</div><div className={styles.value}>{o.product ? o.product.imei : '-'}</div></div>
          <div className={styles.section}><div className={styles.label}>‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤:</div><div className={styles.value}>{o.product ? o.product.price.toLocaleString('th-TH', { style: 'currency', currency: 'THB' }) : '-'}</div></div>
          {o.product && <Link className={styles.linkBtn} to={`/admin/products/${o.product.id}`}>‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</Link>}
        </div>
        <div className={styles.sectionCard}>
          <div className={styles.sectionTitle}>üí≥ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ú‡πà‡∏≠‡∏ô‡∏ä‡∏≥‡∏£‡∏∞</div>
          {o.category === 'cash_purchase' ? (
            <>
              <div className={styles.section}><div className={styles.label}>‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏° (‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏°‡∏î‡∏≠‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢):</div><div className={styles.value}>{o.total_price.toLocaleString('th-TH', { style: 'currency', currency: 'THB' })}</div></div>
              <div className={styles.section}><div className={styles.label}>‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏° (‡∏£‡∏ß‡∏°‡∏î‡∏≠‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢):</div><div className={styles.value}></div></div>
              <div className={styles.section}><div className={styles.label}>‡πÄ‡∏á‡∏¥‡∏ô‡∏î‡∏≤‡∏ß‡∏ô‡πå:</div><div className={styles.value}></div></div>
              <div className={styles.section}><div className={styles.label}>‡∏Ñ‡πà‡∏≤‡πÄ‡∏ä‡πà‡∏≤/‡∏ú‡πà‡∏≠‡∏ô:</div><div className={styles.value}></div></div>
              <div className={styles.section}><div className={styles.label}>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏á‡∏ß‡∏î:</div><div className={styles.value}></div></div>
              <div className={styles.section}><div className={styles.label}>‡∏¢‡∏≠‡∏î‡∏ä‡∏≥‡∏£‡∏∞‡∏ï‡πà‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô:</div><div className={styles.value}></div></div>
            </>
          ) : (
            <>
              <div className={styles.section}><div className={styles.label}>‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏° (‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏°‡∏î‡∏≠‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢):</div><div className={styles.value}>{o.total_price.toLocaleString('th-TH', { style: 'currency', currency: 'THB' })}</div></div>
              <div className={styles.section}><div className={styles.label}>‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏° (‡∏£‡∏ß‡∏°‡∏î‡∏≠‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢):</div><div className={styles.value}>{o.total_with_interest.toLocaleString('th-TH', { style: 'currency', currency: 'THB' })}</div></div>
              <div className={styles.section}><div className={styles.label}>‡πÄ‡∏á‡∏¥‡∏ô‡∏î‡∏≤‡∏ß‡∏ô‡πå:</div><div className={styles.value}>{typeof o.down_payment_amount === 'number' ? o.down_payment_amount.toLocaleString('th-TH', { style: 'currency', currency: 'THB' }) : '-'}</div></div>
              <div className={styles.section}><div className={styles.label}>‡∏Ñ‡πà‡∏≤‡πÄ‡∏ä‡πà‡∏≤/‡∏ú‡πà‡∏≠‡∏ô:</div><div className={styles.value}>{typeof o.rental_cost === 'number' ? o.rental_cost.toLocaleString('th-TH', { style: 'currency', currency: 'THB' }) : '-'}</div></div>
              <div className={styles.section}><div className={styles.label}>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏á‡∏ß‡∏î:</div><div className={styles.value}>{o.installment_months} ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô</div></div>
              <div className={styles.section}><div className={styles.label}>‡∏¢‡∏≠‡∏î‡∏ä‡∏≥‡∏£‡∏∞‡∏ï‡πà‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô:</div><div className={styles.value}>{o.monthly_payment.toLocaleString('th-TH', { style: 'currency', currency: 'THB' })}</div></div>
            </>
          )}
        </div>
        <div className={styles.sectionCard}>
          <div className={styles.sectionTitle}>üìÑ ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£</div>
          {o.pdpa_consent_file_filename ? (
            <button
              className={styles.linkBtn}
              type="button"
              onClick={handleShowPdpaModal}
            >
              ‡∏î‡∏π‡πÑ‡∏ü‡∏•‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏° PDPA
            </button>
          ) : (
            <div className={styles.value}>-</div>
          )}
        </div>
        {showPdpaModal && (
          <div className={styles.modalOverlay}>
            <div className={styles.modalContent}>
              <div className={styles.modalHeader}>
                <span>‡πÅ‡∏™‡∏î‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏° PDPA</span>
                <button className={styles.closeBtn} onClick={handleClosePdpaModal} aria-label="‡∏õ‡∏¥‡∏î">&times;</button>
              </div>
              <div className={styles.modalBody}>
                {pdpaLoading ? (
                  <div style={{ padding: 32, textAlign: 'center' }}>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå...</div>
                ) : pdpaError ? (
                  <div style={{ color: '#ef4444', padding: 32 }}>{pdpaError}</div>
                ) : pdpaBlobUrl ? (
                  <iframe
                    src={pdpaBlobUrl}
                    title="PDPA Consent File"
                    width="100%"
                    height="500px"
                    style={{ border: '1px solid #ddd', borderRadius: 8 }}
                  />
                ) : null}
              </div>
              <div className={styles.modalFooter}>
                {pdpaBlobUrl && (
                  <a
                    href={pdpaBlobUrl}
                    download={o.pdpa_consent_file_filename}
                    className={styles.downloadBtn}
                  >
                    ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå
                  </a>
                )}
              </div>
            </div>
          </div>
        )}
        <div className={styles.sectionCard}>
          <div className={styles.sectionTitle}>üí∞ ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô</div>
          {!paymentLoading && !paymentError && (
            <PaymentAlerts contract={o} payments={payments} />
          )}
          {paymentLoading ? (
            <div style={{ padding: 16, color: '#64748b' }}>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</div>
          ) : paymentError ? (
            <div style={{ padding: 16, color: '#ef4444' }}>{paymentError}</div>
          ) : (
            <div className={styles.paymentTableWrapper}>
              <table className={styles.paymentTable}>
                <thead>
                  <tr>
                    <th>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ä‡∏≥‡∏£‡∏∞</th>
                    <th>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô</th>
                    <th>‡∏ß‡∏¥‡∏ò‡∏µ‡∏ä‡∏≥‡∏£‡∏∞</th>
                    <th>‡∏´‡∏•‡∏±‡∏Å‡∏ê‡∏≤‡∏ô</th>
                  </tr>
                </thead>
                <tbody>
                  {payments.length === 0 ? (
                    <tr>
                      <td colSpan={4} style={{ textAlign: 'center', color: '#ef4444', fontWeight: 600, fontSize: 17, padding: 16 }}>
                        ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏Å‡πâ‡∏≠‡∏ô‡πÅ‡∏£‡∏Å{typeof o.down_payment_amount === 'number' && o.down_payment_amount > 0 ? ` (‡πÄ‡∏á‡∏¥‡∏ô‡∏î‡∏≤‡∏ß‡∏ô‡πå ${o.down_payment_amount.toLocaleString('th-TH', { style: 'currency', currency: 'THB' })})` : ''}
                      </td>
                    </tr>
                  ) : payments.map(pm => (
                    <tr key={pm.id}>
                      <td>{formatDate(pm.payment_date)}</td>
                      <td>{pm.amount.toLocaleString('th-TH', { style: 'currency', currency: 'THB' })}</td>
                      <td>{pm.method === 'bank_transfer' ? '‡πÇ‡∏≠‡∏ô‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£' : pm.method === 'cash' ? '‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î' : pm.method}</td>
                      <td>
                        {pm.proof_url
                          ? <button type="button" className={styles.linkBtn} onClick={() => { setSelectedPaymentId(pm.id); setShowPaymentDetailModal(true); }}>‡∏î‡∏π‡∏´‡∏•‡∏±‡∏Å‡∏ê‡∏≤‡∏ô</button>
                          : '-'}
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          )}
        </div>
        <PaymentDetailModal
          open={showPaymentDetailModal}
          paymentId={selectedPaymentId}
          onClose={() => setShowPaymentDetailModal(false)}
          onActionSuccess={() => {
            if (id) {
              setPaymentLoading(true);
              setPaymentError(null);
              getContractPayments(id)
                .then(data => setPayments(data ?? []))
                .catch(() => setPaymentError('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô'))
                .finally(() => setPaymentLoading(false));
            }
          }}
        />
        <div className={styles.meta}>
          <div>‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠: {formatDate(o.created_at)}</div>
          <div>‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: {formatDate(o.updated_at)}</div>
        </div>
      </div>
    </div>
  );
};

function PaymentAlerts({ contract, payments }: { contract: ContractDetail, payments: Payment[] }) {
  if (!contract) return null;
  const alerts: string[] = [];
  const now = new Date();
  const thisMonth = now.getMonth() + 1;
  const thisYear = now.getFullYear();
  // ‡πÄ‡∏á‡∏¥‡∏ô‡∏î‡∏≤‡∏ß‡∏ô‡πå
  if (typeof contract.down_payment_amount === 'number' && contract.down_payment_amount > 0) {
    const downPaid = payments.reduce((sum, p) => sum + (p.amount || 0), 0);
    if (downPaid < contract.down_payment_amount) {
      alerts.push(`‚ö†Ô∏è ‡πÄ‡∏á‡∏¥‡∏ô‡∏î‡∏≤‡∏ß‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ä‡∏≥‡∏£‡∏∞ ${contract.down_payment_amount.toLocaleString('th-TH', { style: 'currency', currency: 'THB' })} ‡∏ä‡∏≥‡∏£‡∏∞‡πÅ‡∏•‡πâ‡∏ß ${downPaid.toLocaleString('th-TH', { style: 'currency', currency: 'THB' })} ‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ${ (contract.down_payment_amount - downPaid).toLocaleString('th-TH', { style: 'currency', currency: 'THB' }) }`);
    }
  }
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ (‡∏Ç‡πâ‡∏≤‡∏°‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÅ‡∏£‡∏Å‡∏Ç‡∏≠‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤)
  let paidThisMonth = 0;
  // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÅ‡∏£‡∏Å‡∏Ç‡∏≠‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤
  let isFirstMonth = false;
  if (contract.start_date) {
    const start = new Date(contract.start_date);
    isFirstMonth = (start.getFullYear() === thisYear && start.getMonth() + 1 === thisMonth);
  }
  payments.forEach(p => {
    const d = new Date(p.payment_date);
    if (d.getMonth() + 1 === thisMonth && d.getFullYear() === thisYear) {
      paidThisMonth += p.amount || 0;
    }
  });
  if (!isFirstMonth && typeof contract.monthly_payment === 'number' && contract.monthly_payment > 0) {
    if (paidThisMonth < contract.monthly_payment) {
      alerts.push(`‚ö†Ô∏è ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏ß‡∏£‡∏ä‡∏≥‡∏£‡∏∞ ${contract.monthly_payment.toLocaleString('th-TH', { style: 'currency', currency: 'THB' })} ‡∏ä‡∏≥‡∏£‡∏∞‡πÅ‡∏•‡πâ‡∏ß ${paidThisMonth.toLocaleString('th-TH', { style: 'currency', currency: 'THB' })} ‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ${ (contract.monthly_payment - paidThisMonth).toLocaleString('th-TH', { style: 'currency', currency: 'THB' }) }`);
    } else {
      alerts.push(`‚úÖ ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏ä‡∏≥‡∏£‡∏∞‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß (${contract.monthly_payment.toLocaleString('th-TH', { style: 'currency', currency: 'THB' })})`);
    }
  }
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πâ‡∏≤‡∏á‡∏ä‡∏≥‡∏£‡∏∞‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á
  let lastPaidDate: Date | null = null;
  if (payments.length > 0) {
    lastPaidDate = payments
      .map(p => new Date(p.payment_date))
      .reduce((latest, d) => (!latest || d > latest ? d : latest), null as Date | null);
  }
  if (lastPaidDate) {
    const lastMonth = lastPaidDate.getMonth() + 1;
    const lastYear = lastPaidDate.getFullYear();
    if (lastYear < thisYear || (lastYear === thisYear && lastMonth < thisMonth)) {
      const monthsLate = (thisYear - lastYear) * 12 + (thisMonth - lastMonth);
      if (monthsLate > 0) {
        alerts.push(`‚ö†Ô∏è ‡∏Ñ‡πâ‡∏≤‡∏á‡∏ä‡∏≥‡∏£‡∏∞ ${monthsLate} ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô (‡∏ä‡∏≥‡∏£‡∏∞‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: ${lastPaidDate.toLocaleDateString('th-TH', { year: 'numeric', month: 'short', day: 'numeric' })})`);
      }
    }
  }
  if (alerts.length === 0) return null;
  return (
    <div style={{ marginBottom: 12 }}>
      {alerts.map((msg, idx) => (
        <div key={idx} style={{ color: msg.startsWith('‚úÖ') ? '#22c55e' : '#ef4444', fontWeight: 600, fontSize: 15, marginBottom: 2 }}>{msg}</div>
      ))}
    </div>
  );
}

export default OrderDetailPage; 