import React, { useState, useRef, useEffect } from 'react';
import styles from './OrderCreateModal.module.css';
import { getUserListBrief, type UserBrief } from '../../../services/dashboard/user/user-detail.service';
import { getAvailableProducts } from '../../../services/products.service';
import type { Product } from '../../../services/products.service';
import { createContract, updateContractTransaction, deleteMinimalContract } from '../../../services/contract.service';
import { toast } from 'react-toastify';
import { useNavigate } from 'react-router-dom';
import ContractFileTypeSelector from '../../../components/contract/ContractFileTypeSelector';
import ContractFileUpload from '../../../components/contract/ContractFileUpload';
import AutoContractGenerator from '../../../components/contract/AutoContractGenerator';
import ManualContractInput from '../../../components/contract/ManualContractInput';
import ContractIdErrorModal from '../../../components/contract/ContractIdErrorModal';

interface OrderCreateModalProps {
  open: boolean;
  onClose: () => void;
  onSuccess?: () => void;
}

const categoryOptions = [
  { value: 'rent', label: 'ผ่อน' },
  { value: 'cash_purchase', label: 'ซื้อเงินสด' },
];
const statusOptions = [
  { value: 'active', label: 'ใช้งานอยู่' },
  { value: 'closed', label: 'ปิดสัญญา' },
  { value: 'default', label: 'รอดำเนินการ' },
  { value: 'repossessed', label: 'ยึดคืน' },
  { value: 'returned', label: 'คืนสินค้า' },
  { value: 'hold_by_system', label: 'ระบบถือครอง' },
];

const OrderCreateModal: React.FC<OrderCreateModalProps> = ({ open, onClose, onSuccess }) => {
  const [form, setForm] = useState({
    user_id: '',
    product_id: '',
    category: 'rent',
    total_price: '',
    total_with_interest: '',
    installment_months: '',
    monthly_payment: '',
    status: 'active',
    start_date: '',
    end_date: '',
    pdpa_consent_file: null as File | null,
    user_name: '',
    down_payment_amount: '',
    rental_cost: '',
  });
  const fileInputRef = useRef<HTMLInputElement | null>(null);
  const [userQuery, setUserQuery] = useState('');
  const [showUserList, setShowUserList] = useState(false);
  const userInputRef = useRef<HTMLInputElement | null>(null);
  const [userList, setUserList] = useState<UserBrief[]>([]);
  const [userLoading, setUserLoading] = useState(false);
  const [productList, setProductList] = useState<Product[]>([]);
  const [productLoading, setProductLoading] = useState(false);
  const [productQuery, setProductQuery] = useState('');
  const [showProductList, setShowProductList] = useState(false);
  const productInputRef = useRef<HTMLInputElement | null>(null);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [contractFileType, setContractFileType] = useState<'upload' | 'auto' | 'manual'>('upload');
  const [autoGeneratedPdfBlob, setAutoGeneratedPdfBlob] = useState<Blob | null>(null);
  const [autoGeneratedContractId, setAutoGeneratedContractId] = useState<string | null>(null);
  const [manualContractId, setManualContractId] = useState<string>('');
  const [showConfirmModal, setShowConfirmModal] = useState(false);
  const [confirmModalConfig, setConfirmModalConfig] = useState<{
    title: string;
    message: string;
    onConfirm: () => void;
    confirmText: string;
    cancelText: string;
  } | null>(null);
  const [showContractIdErrorModal, setShowContractIdErrorModal] = useState(false);
  const navigate = useNavigate();

  useEffect(() => {
    if (!open) return;
    
    // ตรวจสอบว่า modal เปิดอยู่จริงๆ (ไม่ใช่แค่โหลดหน้าใหม่)
    const isModalActuallyOpen = document.querySelector(`.${styles.modalBackdrop}`) !== null;
    if (!isModalActuallyOpen) return;
    
    setUserLoading(true);
    getUserListBrief()
      .then(data => setUserList(data ?? []))
      .catch(() => setUserList([]))
      .finally(() => setUserLoading(false));
    setProductLoading(true);
    getAvailableProducts()
      .then(data => setProductList(data ?? []))
      .catch(() => setProductList([]))
      .finally(() => setProductLoading(false));

    // ตรวจสอบ localStorage สำหรับเลขคำสั่งซื้อค้าง
    const pendingContractId = localStorage.getItem('pendingMinimalContractId');
    if (pendingContractId) {
      setAutoGeneratedContractId(pendingContractId);
      // แจ้งเตือนผู้ใช้
      toast.info(`พบเลขคำสั่งซื้อค้าง: ${pendingContractId}`, {
        autoClose: 5000,
        position: "top-center"
      });
    }

    // รีเซ็ตค่าทุก field เมื่อเปิด modal
    const todayStr = new Date().toISOString().slice(0, 10);
    setForm({
      user_id: '',
      product_id: '',
      category: 'rent',
      total_price: '',
      total_with_interest: '',
      installment_months: '',
      monthly_payment: '',
      status: 'active',
      start_date: todayStr,
      end_date: '',
      pdpa_consent_file: null,
      user_name: '',
      down_payment_amount: '',
      rental_cost: '',
    });
    setUserQuery('');
    setProductQuery('');
    setShowUserList(false);
    setShowProductList(false);
    setContractFileType('upload');
    setAutoGeneratedPdfBlob(null);
    // ไม่รีเซ็ต autoGeneratedContractId ถ้ามีใน localStorage
    if (!pendingContractId) {
      setAutoGeneratedContractId(null);
    }
    setManualContractId('');
  }, [open]);

  // เพิ่ม useEffect สำหรับจัดการ localStorage
  useEffect(() => {
    // เก็บ contract ID ใน localStorage เมื่อมี
    if (autoGeneratedContractId) {
      localStorage.setItem('pendingMinimalContractId', autoGeneratedContractId);
    }
    // ไม่ลบ localStorage เมื่อ autoGeneratedContractId เป็น null
    // ให้ระบบอื่นๆ จัดการการลบ localStorage ผ่านการตรวจสอบ API
  }, [autoGeneratedContractId]);

  useEffect(() => {
    if (form.category === 'cash_purchase') {
      setForm(prev => ({ ...prev, user_id: '', user_name: '' }));
      setUserQuery('');
    }
  }, [form.category]);

  // ให้ end_date auto update ทุกครั้งที่ start_date หรือ installment_months เปลี่ยน
  useEffect(() => {
    if (!open) return;
    if (form.start_date && form.installment_months) {
      setForm(prev => ({
        ...prev,
        end_date: calcEndDate(form.start_date, form.installment_months)
      }));
    }
  }, [form.start_date, form.installment_months, open]);

  if (!open) return null;

  // ฟังก์ชันช่วยคำนวณวันที่สิ้นสุด
  function calcEndDate(start: string, months: string) {
    if (!start || !months) return '';
    const d = new Date(start);
    const m = parseInt(months, 10);
    if (isNaN(m)) return '';
    d.setMonth(d.getMonth() + m);
    // คืนค่า yyyy-MM-dd
    return d.toISOString().slice(0, 10);
  }

  // ฟังก์ชันคำนวณยอดผ่อนต่อเดือน
  function calculateMonthlyPayment(rentalCost: number, installmentMonths: number): string {
    if (isNaN(rentalCost) || isNaN(installmentMonths) || installmentMonths <= 0) {
      return '';
    }
    
    // ยอดผ่อนต่อเดือน = ค่าเช่า/ผ่อน ÷ จำนวนงวด
    // เดือนแรกจ่ายดาวน์แล้วเอาเครื่องไปใช้ เดือนหน้าจึงเริ่มจ่ายผ่อน
    return (rentalCost / installmentMonths).toFixed(2);
  }

  // ฟังก์ชันจัดการ PDF blob จาก AutoContractGenerator
  const handlePdfGenerated = (blob: Blob, contractId?: string) => {
    setAutoGeneratedPdfBlob(blob);
    if (contractId) {
      setAutoGeneratedContractId(contractId);
    }
  };

  // ฟังก์ชันแสดง modal ยืนยัน
  const showConfirmDialog = (config: {
    title: string;
    message: string;
    onConfirm: () => void;
    confirmText?: string;
    cancelText?: string;
  }) => {
    setConfirmModalConfig({
      ...config,
      confirmText: config.confirmText || 'ยืนยัน',
      cancelText: config.cancelText || 'ยกเลิก'
    });
    setShowConfirmModal(true);
  };

  // ฟังก์ชันรีเซ็ต PDF blob เมื่อเปลี่ยนประเภทไฟล์
  const handleContractFileTypeChange = async (type: 'upload' | 'auto' | 'manual') => {
    // ถ้าเปลี่ยนจาก auto ไป upload และมีเลขคำสั่งซื้อแล้ว ให้แจ้งเตือน
    if (contractFileType === 'auto' && type === 'upload' && autoGeneratedContractId) {
      showConfirmDialog({
        title: '⚠️ แจ้งเตือน',
        message: 'คุณได้สร้างไฟล์ PDF แล้ว และมีเลขคำสั่งซื้อในระบบแล้ว\n\nหากเปลี่ยนไปอัปโหลดไฟล์เอง ระบบจะใช้เลขคำสั่งซื้อเดิม\nและจะใช้ PUT แทน POST ในการบันทึก\n\nต้องการดำเนินการต่อหรือไม่?',
        onConfirm: () => {
          setShowConfirmModal(false);
          setConfirmModalConfig(null);
          performContractFileTypeChange(type);
        },
        confirmText: 'ดำเนินการต่อ',
        cancelText: 'ยกเลิก'
      });
      return;
    }
    
    performContractFileTypeChange(type);
  };

  // ฟังก์ชันเปลี่ยนประเภทไฟล์จริง
  const performContractFileTypeChange = async (type: 'upload' | 'auto' | 'manual') => {
    setContractFileType(type);
    
    // รีเซ็ตไฟล์ของหมวดหมู่ที่ไม่ได้ใช้ แต่เก็บเลขคำสั่งซื้อไว้
    if (type === 'upload') {
      // ถ้าเปลี่ยนไปอัปโหลดเอง ให้ลบ PDF ที่สร้างไว้ แต่เก็บเลขคำสั่งซื้อ
      setAutoGeneratedPdfBlob(null);
      
      // ไม่ลบ minimal contract แล้ว เก็บไว้ใช้กับ PUT
      // if (autoGeneratedContractId) {
      //   await deleteMinimalContract(autoGeneratedContractId);
      //   console.log('ลบ minimal contract สำเร็จ:', autoGeneratedContractId);
      //   localStorage.removeItem('pendingMinimalContractId');
      //   setAutoGeneratedContractId(null);
      // }
      
      toast.info('รีเซ็ตไฟล์อัตโนมัติแล้ว กรุณาเลือกไฟล์ใหม่ (เลขคำสั่งซื้อจะถูกใช้ต่อ)');
    } else if (type === 'auto') {
      // ถ้าเปลี่ยนไปสร้างอัตโนมัติ ให้ลบไฟล์ที่อัปโหลดไว้
      setForm(prev => ({ ...prev, pdpa_consent_file: null }));
      if (fileInputRef.current) {
        fileInputRef.current.value = '';
      }
      toast.info('รีเซ็ตไฟล์อัปโหลดแล้ว กรุณาสร้างไฟล์ใหม่');
    } else if (type === 'manual') {
      // ถ้าเปลี่ยนไปกรอกเอง ให้ลบไฟล์และ PDF ที่มีอยู่
      setForm(prev => ({ ...prev, pdpa_consent_file: null }));
      setAutoGeneratedPdfBlob(null);
      if (fileInputRef.current) {
        fileInputRef.current.value = '';
      }
      toast.info('รีเซ็ตไฟล์แล้ว กรุณากรอกเลขคำสั่งซื้อและเลือกไฟล์ใหม่');
    }
  };

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    if (name === 'down_payment_amount') {
      setForm(prev => {
        const newForm = { ...prev, [name]: value.replace(/[^\d.]/g, '') };
        // auto-calc rental_cost ถ้าข้อมูลครบ
        const totalWithInterest = parseFloat(newForm.total_with_interest);
        const downPayment = parseFloat(newForm.down_payment_amount);
        if (!isNaN(totalWithInterest) && !isNaN(downPayment)) {
          newForm.rental_cost = (totalWithInterest - downPayment).toFixed(2);
          // คำนวณยอดผ่อนต่อเดือนใหม่
          const rentalCost = parseFloat(newForm.rental_cost);
          const installmentMonths = parseInt(newForm.installment_months, 10);
          newForm.monthly_payment = calculateMonthlyPayment(rentalCost, installmentMonths);
        } else {
          newForm.rental_cost = '';
          newForm.monthly_payment = '';
        }
        return newForm;
      });
      return;
    }
    if (name === 'total_with_interest') {
      setForm(prev => {
        const newForm = { ...prev, [name]: value };
        // auto-calc rental_cost ถ้าข้อมูลครบ
        const totalWithInterest = parseFloat(value);
        const downPayment = parseFloat(newForm.down_payment_amount);
        if (!isNaN(totalWithInterest) && !isNaN(downPayment)) {
          newForm.rental_cost = (totalWithInterest - downPayment).toFixed(2);
          // คำนวณยอดผ่อนต่อเดือนใหม่
          const rentalCost = parseFloat(newForm.rental_cost);
          const installmentMonths = parseInt(newForm.installment_months, 10);
          newForm.monthly_payment = calculateMonthlyPayment(rentalCost, installmentMonths);
        } else {
          newForm.rental_cost = '';
          newForm.monthly_payment = '';
        }
        return newForm;
      });
      return;
    }
    if (name === 'category' && value === 'cash_purchase') {
      setForm(prev => ({
        ...prev,
        [name]: value,
        status: 'closed',
        total_with_interest: '',
        installment_months: '',
        monthly_payment: '',
        start_date: '',
        end_date: '',
        pdpa_consent_file: null
      }));
    } else if (name === 'category') {
      setForm(prev => ({ ...prev, [name]: value, status: 'active' }));
    } else if (name === 'installment_months') {
      if (parseInt(value, 10) > 24) {
        setForm(prev => ({ ...prev, [name]: '' }));
        toast.error('จำนวนงวดผ่อนสูงสุด 24 งวด');
        return;
      }
      setForm(prev => {
        const newForm = { ...prev, [name]: value };
        const rentalCost = parseFloat(newForm.rental_cost);
        const installmentMonths = parseInt(value, 10);
        newForm.monthly_payment = calculateMonthlyPayment(rentalCost, installmentMonths);
        // auto คำนวณ end_date
        newForm.end_date = calcEndDate(newForm.start_date || new Date().toISOString().slice(0, 10), value);
        return newForm;
      });
    } else if (name === 'start_date') {
      setForm(prev => {
        const newForm = { ...prev, [name]: value };
        newForm.end_date = calcEndDate(value, newForm.installment_months);
        return newForm;
      });
    } else {
      setForm(prev => ({ ...prev, [name]: value }));
    }
  };

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      const file = e.target.files[0];
      
      setForm(prev => ({ ...prev, pdpa_consent_file: file }));
      toast.success(`อัปโหลดไฟล์ "${file.name}" สำเร็จ`);
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (isSubmitting) return;
    setIsSubmitting(true);
    
    // validate
    const isCashPurchase = form.category === 'cash_purchase';
    const isRent = form.category === 'rent';
    
    // ตรวจสอบเลขคำสั่งซื้อสำหรับกรณี PUT เท่านั้น
    // กรณี PUT: มีเลขคำสั่งซื้อแล้ว (auto มี autoGeneratedContractId, manual มี manualContractId)
    // กรณี POST: ยังไม่มีเลขคำสั่งซื้อ (จะสร้างใหม่) - upload, auto (ไม่มี contractId)
    if (isRent) {
      const hasAutoContractId = contractFileType === 'auto' && autoGeneratedContractId;
      const hasManualContractId = contractFileType === 'manual' && manualContractId.trim();
      
      // ตรวจสอบเฉพาะกรณีที่มีเลขคำสั่งซื้อแล้ว (PUT)
      if (hasAutoContractId) {
        // กรณี PUT: มีเลขคำสั่งซื้อแล้ว (auto)
      } else if (hasManualContractId) {
        // กรณี PUT: มีเลขคำสั่งซื้อแล้ว (manual)
      } else if (contractFileType === 'auto' || contractFileType === 'manual') {
        // กรณี PUT: ไม่มีเลขคำสั่งซื้อ แสดง modal
        setIsSubmitting(false);
        setShowContractIdErrorModal(true);
        return;
      }
      // กรณี POST: ไม่ตรวจสอบ (upload, auto ที่ไม่มี contractId จะสร้างใหม่)
    }
    
    // validate
    let requiredFields: (string | File | null)[] = [];
    if (isRent) {
      requiredFields = [
        form.user_id,
        form.product_id,
        form.category,
        form.total_price,
        form.total_with_interest,
        form.installment_months,
        form.monthly_payment,
        form.status,
        form.start_date,
        form.end_date
      ];
      // เพิ่มการตรวจสอบไฟล์สัญญาตามประเภทที่เลือก
      if (contractFileType === 'upload') {
        requiredFields.push(form.pdpa_consent_file);
        // ตรวจสอบเพิ่มเติมสำหรับอัปโหลดเอง
        if (!form.pdpa_consent_file) {
          toast.error('กรุณาเลือกไฟล์สัญญาคำสั่งซื้อ (หมวดอัปโหลดเอง)');
          setIsSubmitting(false);
          return;
        }
      } else if (contractFileType === 'auto') {
        // ตรวจสอบเพิ่มเติมสำหรับสร้างอัตโนมัติ
        if (!autoGeneratedPdfBlob) {
          toast.error('กรุณาสร้างไฟล์ PDF ก่อนยืนยันคำสั่งซื้อ (หมวดสร้างอัตโนมัติ)');
          setIsSubmitting(false);
          return;
        }
      } else if (contractFileType === 'manual') {
        // ตรวจสอบเพิ่มเติมสำหรับกรอกเอง
        if (!manualContractId.trim()) {
          toast.error('กรุณากรอกเลขคำสั่งซื้อ (หมวดกรอกเอง)');
          setIsSubmitting(false);
          return;
        }
        if (!form.pdpa_consent_file) {
          toast.error('กรุณาเลือกไฟล์สัญญาคำสั่งซื้อ (หมวดกรอกเอง)');
          setIsSubmitting(false);
          return;
        }
      }
    } else if (isCashPurchase) {
      requiredFields = [
        form.product_id,
        form.category,
        form.total_price
      ];
    }
    
    if (requiredFields.some(field => !field)) {
      toast.error('กรุณากรอกข้อมูลให้ครบถ้วน');
      setIsSubmitting(false);
      return;
    }

    // ตรวจสอบข้อมูลเพิ่มเติมสำหรับการเช่า
    if (isRent) {
      // ตรวจสอบค่าตัวเลข
      const numericChecks = [
        { field: form.total_price, name: 'ราคาสินค้า' },
        { field: form.total_with_interest, name: 'ราคารวมดอกเบี้ย' },
        { field: form.installment_months, name: 'จำนวนงวด' },
        { field: form.monthly_payment, name: 'ยอดผ่อนต่อเดือน' }
      ];

      for (const check of numericChecks) {
        if (isNaN(Number(check.field)) || Number(check.field) <= 0) {
          toast.error(`${check.name} ต้องเป็นตัวเลขที่มากกว่า 0`);
          setIsSubmitting(false);
          return;
        }
      }

      // ตรวจสอบจำนวนงวด
      const installmentMonths = Number(form.installment_months);
      if (installmentMonths > 24) {
        toast.error('จำนวนงวดผ่อนสูงสุด 24 งวด');
        setIsSubmitting(false);
        return;
      }

      // ตรวจสอบวันที่
      const startDate = new Date(form.start_date);
      const endDate = new Date(form.end_date);
      if (isNaN(startDate.getTime()) || isNaN(endDate.getTime())) {
        toast.error('รูปแบบวันที่ไม่ถูกต้อง');
        setIsSubmitting(false);
        return;
      }
      if (startDate >= endDate) {
        toast.error('วันที่เริ่มต้องน้อยกว่าวันที่สิ้นสุด');
        setIsSubmitting(false);
        return;
      }

      // ตรวจสอบความสอดคล้องของข้อมูล
      const totalPrice = Number(form.total_price);
      const totalWithInterest = Number(form.total_with_interest);
      if (totalWithInterest < totalPrice) {
        toast.error('ราคารวมดอกเบี้ยต้องมากกว่าหรือเท่ากับราคาสินค้า');
        setIsSubmitting(false);
        return;
      }

      const monthlyPayment = Number(form.monthly_payment);
      const calculatedMonthly = (totalWithInterest - (Number(form.down_payment_amount) || 0)) / installmentMonths;
      if (Math.abs(monthlyPayment - calculatedMonthly) > 1) { // อนุญาตให้ต่างกัน 1 บาท
        toast.error('ยอดผ่อนต่อเดือนไม่สอดคล้องกับข้อมูลอื่นๆ');
        setIsSubmitting(false);
        return;
      }
    }
    
    // เตรียม payload
    const payload: Record<string, unknown> = {};
    
    if (isCashPurchase) {
      // สำหรับการซื้อเงินสด
      payload.product_id = form.product_id;
      payload.category = form.category;
      payload.total_price = Number(form.total_price);
      payload.total_with_interest = Number(form.total_price);
      payload.installment_months = 1;
      payload.monthly_payment = 0;
      payload.status = 'active';
      // วันที่เริ่ม/สิ้นสุด ใส่วันปัจจุบันเสมอ
      const today = new Date();
      const yyyy = today.getFullYear();
      const mm = String(today.getMonth() + 1).padStart(2, '0');
      const dd = String(today.getDate()).padStart(2, '0');
      const todayStr = `${yyyy}-${mm}-${dd}`;
      payload.start_date = todayStr;
      payload.end_date = todayStr;
      // ไม่ต้องแนบไฟล์ pdpa_consent_file
      // ถ้า user_id เป็น string ว่าง ให้ลบ property ออก (ไม่ต้องส่งไป backend)
      if (form.user_id && form.user_id !== '') {
        payload.user_id = form.user_id;
      }
    } else if (isRent) {
      // สำหรับการเช่า/ผ่อน
      payload.user_id = form.user_id;
      payload.product_id = form.product_id;
      payload.category = form.category;
      payload.total_price = Number(form.total_price);
      payload.total_with_interest = Number(form.total_with_interest);
      payload.installment_months = Number(form.installment_months);
      payload.monthly_payment = Number(form.monthly_payment);
      payload.status = form.status;
      payload.start_date = form.start_date;
      payload.end_date = form.end_date;
      
      // เพิ่มข้อมูลเงินดาวน์และค่าเช่า
      if (form.down_payment_amount !== '') {
        payload.down_payment_amount = Number(form.down_payment_amount);
      }
      if (form.rental_cost !== '') {
        payload.rental_cost = Number(form.rental_cost);
      }
      
      // จัดการไฟล์สัญญาตามประเภทที่เลือก
      if (contractFileType === 'upload') {
        // ถ้าเป็นอัปโหลดเอง ต้องมีไฟล์
        if (!form.pdpa_consent_file) {
          toast.error('กรุณาเลือกไฟล์สัญญาคำสั่งซื้อ');
          setIsSubmitting(false);
          return;
        }
        payload.pdpa_consent_file = form.pdpa_consent_file;
        
        // ตรวจสอบว่ามีเลขคำสั่งซื้อหรือไม่
        if (autoGeneratedContractId) {
          // ใช้ PUT request (มีเลขคำสั่งซื้อแล้ว)
          try {
            const res = await updateContractTransaction(autoGeneratedContractId, payload);
            let id: string | undefined;
            if (res && typeof res.data === 'object' && res.data !== null && 'id' in res.data && typeof (res.data as Record<string, unknown>).id === 'string') {
              id = (res.data as Record<string, unknown>).id as string;
            }
            toast.success('อัปเดตคำสั่งซื้อสำเร็จ!');
            // ลบ localStorage เมื่อสร้างสำเร็จ
            localStorage.removeItem('pendingMinimalContractId');
            setTimeout(() => {
              if (id) {
                navigate(`/admin/orders/${id}`);
              } else {
                onClose();
              }
              setIsSubmitting(false);
            }, 800);
            if (onSuccess) onSuccess();
            return; // ออกจาก function ตรงนี้
          } catch {
            toast.error('เกิดข้อผิดพลาดในการอัปเดตคำสั่งซื้อ');
            setIsSubmitting(false);
            return;
          }
        } else {
          // ใช้ POST request (ยังไม่มีเลขคำสั่งซื้อ)
          try {
            const res = await createContract(payload);
            // ปลอดภัย ไม่ใช้ any
            let id: string | undefined;
            if (res && typeof res.data === 'object' && res.data !== null && 'id' in res.data && typeof (res.data as Record<string, unknown>).id === 'string') {
              id = (res.data as Record<string, unknown>).id as string;
            }
            toast.success('สร้างคำสั่งซื้อสำเร็จ!');
            // ลบ localStorage เมื่อสร้างสำเร็จ
            localStorage.removeItem('pendingMinimalContractId');
            setTimeout(() => {
              if (id) {
                navigate(`/admin/orders/${id}`);
              } else {
                onClose();
              }
              setIsSubmitting(false);
            }, 800);
            if (onSuccess) onSuccess();
            return; // ออกจาก function ตรงนี้
          } catch {
            toast.error('เกิดข้อผิดพลาดในการสร้างคำสั่งซื้อ');
            setIsSubmitting(false);
            return;
          }
        }
      } else if (contractFileType === 'auto') {
        // ถ้าเป็นระบบสร้างอัตโนมัติ
        if (!autoGeneratedPdfBlob) {
          toast.error('กรุณาสร้างไฟล์ PDF ก่อนยืนยันคำสั่งซื้อ (หมวดสร้างอัตโนมัติ)');
          setIsSubmitting(false);
          return;
        }
        // แปลง blob เป็น File object
        const pdfFile = new File([autoGeneratedPdfBlob], `contract-${Date.now()}.pdf`, {
          type: 'application/pdf'
        });
        payload.pdpa_consent_file = pdfFile;
        
        // ใช้ PUT request (มีเลขคำสั่งซื้อแล้ว)
        try {
          const res = await updateContractTransaction(autoGeneratedContractId!, payload);
          let id: string | undefined;
          if (res && typeof res.data === 'object' && res.data !== null && 'id' in res.data && typeof (res.data as Record<string, unknown>).id === 'string') {
            id = (res.data as Record<string, unknown>).id as string;
          }
          toast.success('สร้างคำสั่งซื้อสำเร็จ!');
          // ลบ localStorage เมื่อสร้างสำเร็จ
          localStorage.removeItem('pendingMinimalContractId');
          setTimeout(() => {
            if (id) {
              navigate(`/admin/orders/${id}`);
            } else {
              onClose();
            }
            setIsSubmitting(false);
          }, 800);
          if (onSuccess) onSuccess();
          return; // ออกจาก function ตรงนี้
        } catch {
          toast.error('เกิดข้อผิดพลาดในการสร้างคำสั่งซื้อ');
          setIsSubmitting(false);
          return;
        }
      } else if (contractFileType === 'manual') {
        // ถ้าเป็นระบบกรอกเอง
        if (!manualContractId.trim()) {
          toast.error('กรุณากรอกเลขคำสั่งซื้อ (หมวดกรอกเอง)');
          setIsSubmitting(false);
          return;
        }
        if (!form.pdpa_consent_file) {
          toast.error('กรุณาเลือกไฟล์สัญญาคำสั่งซื้อ (หมวดกรอกเอง)');
          setIsSubmitting(false);
          return;
        }
        payload.pdpa_consent_file = form.pdpa_consent_file;

        // ใช้ PUT request สำหรับ manual type
        try {
          const res = await updateContractTransaction(manualContractId, payload);
          let id: string | undefined;
          if (res && typeof res.data === 'object' && res.data !== null && 'id' in res.data && typeof (res.data as Record<string, unknown>).id === 'string') {
            id = (res.data as Record<string, unknown>).id as string;
          }
          toast.success('อัปเดตคำสั่งซื้อสำเร็จ!');
          localStorage.removeItem('pendingMinimalContractId');
          setTimeout(() => {
            if (id) {
              navigate(`/admin/orders/${id}`);
            } else {
              onClose();
            }
            setIsSubmitting(false);
          }, 800);
          if (onSuccess) onSuccess();
          return; // ออกจาก function ตรงนี้
        } catch {
          toast.error('เกิดข้อผิดพลาดในการอัปเดตคำสั่งซื้อ');
          setIsSubmitting(false);
          return;
        }
      }
    }
    // แปลงค่าเป็น number ถ้ามี
    if (form.down_payment_amount !== '') payload.down_payment_amount = Number(form.down_payment_amount);
    if (form.rental_cost !== '') payload.rental_cost = Number(form.rental_cost);
    
    // กรณี POST (สร้างใหม่) - ไม่ต้องตรวจสอบเลขคำสั่งซื้อ
    try {
      const res = await createContract(payload);
      // ปลอดภัย ไม่ใช้ any
      let id: string | undefined;
      if (res && typeof res.data === 'object' && res.data !== null && 'id' in res.data && typeof (res.data as Record<string, unknown>).id === 'string') {
        id = (res.data as Record<string, unknown>).id as string;
      }
      toast.success('สร้างคำสั่งซื้อสำเร็จ!');
      // ลบ localStorage เมื่อสร้างสำเร็จ
      localStorage.removeItem('pendingMinimalContractId');
      setTimeout(() => {
        if (id) {
          navigate(`/admin/orders/${id}`);
        } else {
          onClose();
        }
        setIsSubmitting(false);
      }, 800);
      if (onSuccess) onSuccess();
    } catch {
      toast.error('เกิดข้อผิดพลาดในการสร้างคำสั่งซื้อ');
      setIsSubmitting(false);
    }
  };

  const filteredUsers = userList.filter(u =>
    (u.first_name + ' ' + u.phone_number).toLowerCase().includes(userQuery.toLowerCase())
  );

  const handleUserSelect = (user: UserBrief) => {
    setForm(prev => ({ ...prev, user_id: user.id, user_name: user.first_name }));
    setUserQuery(user.first_name + ' (' + user.phone_number + ')');
    setShowUserList(false);
  };

  const filteredProducts = productList.filter(p =>
    (p.id + ' ' + p.model_name).toLowerCase().includes(productQuery.toLowerCase())
  );
  const handleProductSelect = (product: Product) => {
    const todayStr = new Date().toISOString().slice(0, 10);
    setForm(prev => {
      const newStart = todayStr;
      const newEnd = calcEndDate(newStart, prev.installment_months || '');
      return {
        ...prev,
        product_id: product.id,
        total_price: product.price.toString(),
        total_with_interest: product.price.toString(),
        start_date: newStart,
        end_date: newEnd
      };
    });
    setProductQuery(product.id + ' - ' + product.model_name);
    setShowProductList(false);
  };

  const handleClose = async () => {
    // แจ้งเตือนเมื่อมีเลขคำสั่งซื้อในระบบ
    if (autoGeneratedContractId) {
      showConfirmDialog({
        title: '⚠️ แจ้งเตือน',
        message: `คุณมีเลขคำสั่งซื้อ ${autoGeneratedContractId} ในระบบแล้ว\n\nหากยกเลิก เลขคำสั่งซื้อนี้จะถูกลบและไม่สามารถใช้งานได้อีก\n\nหากต้องการใช้เลขคำสั่งซื้อนี้ในภายหลัง ให้ใช้ "กรอกเลขคำสั่งซื้อเอง"\n\nต้องการยกเลิกการสร้างคำสั่งซื้อหรือไม่?`,
        onConfirm: async () => {
          setShowConfirmModal(false);
          setConfirmModalConfig(null);
          
          // ลบ minimal contract ถ้ามี
          if (autoGeneratedContractId) {
            try {
              const response = await deleteMinimalContract(autoGeneratedContractId);
              // ตรวจสอบสถานะการตอบกลับ
              if (response && response.status === 200) {
                console.log('ลบ minimal contract สำเร็จ:', autoGeneratedContractId);
                toast.success(`ลบคำสั่งซื้อสำเร็จ (${autoGeneratedContractId})`);
                // ลบ localStorage เฉพาะเมื่อ API สำเร็จ
                localStorage.removeItem('pendingMinimalContractId');
                // ลบ flag การลบ
                localStorage.removeItem('isDeletingMinimalContract');
              } else {
                console.warn('API ตอบกลับแต่ไม่ใช่สถานะ 200:', response?.status);
                toast.warning(`ไม่สามารถลบคำสั่งซื้อชั่วคราวได้ (${autoGeneratedContractId}) - สถานะ: ${response?.status}`);
                // ไม่ลบ localStorage ถ้า API ไม่สำเร็จ
              }
            } catch (error) {
              console.error('ไม่สามารถลบ minimal contract ได้:', error);
              toast.error(`ไม่สามารถลบคำสั่งซื้อได้ (${autoGeneratedContractId})`);
              // ไม่ลบ localStorage ถ้า API error
            }
          }
          onClose();
        },
        confirmText: 'ยกเลิกการสร้าง',
        cancelText: 'กลับไปแก้ไข'
      });
      return;
    }
    
    onClose();
  };

  // ฟังก์ชันตรวจสอบว่ามีไฟล์สำหรับส่งหรือไม่
  const hasValidFile = () => {
    if (form.category === 'cash_purchase') {
      return true; // ไม่ต้องมีไฟล์สำหรับการซื้อเงินสด
    }
    
    if (contractFileType === 'upload') {
      return !!form.pdpa_consent_file;
    } else if (contractFileType === 'auto') {
      return !!autoGeneratedPdfBlob;
    } else if (contractFileType === 'manual') {
      return !!form.pdpa_consent_file && !!manualContractId.trim();
    }
    
    return false;
  };

  // ฟังก์ชันตรวจสอบว่าปุ่มบันทึกควร disable หรือไม่
  const isSubmitDisabled = () => {
    return isSubmitting || !hasValidFile();
  };

  return (
    <div className={styles.modalBackdrop}>
      <div className={styles.modalContent}>
        <button className={styles.closeBtn} onClick={handleClose} aria-label="ปิด">×</button>
        <h2 className={styles.title}>สร้างคำสั่งซื้อใหม่</h2>
        <form onSubmit={handleSubmit} className={styles.form} autoComplete="off">
          <div style={{ position: 'relative' }}>
            <label>ลูกค้า <span className={styles.required}>*</span></label>
            <input
              type="text"
              name="user_name"
              value={userQuery}
              onChange={e => {
                setUserQuery(e.target.value);
                setShowUserList(true);
                setForm(prev => ({ ...prev, user_id: '', user_name: e.target.value }));
              }}
              onFocus={() => setShowUserList(true)}
              onBlur={() => setShowUserList(false)}
              ref={userInputRef}
              className={styles.inputBox}
              placeholder="พิมพ์ชื่อลูกค้า..."
              autoComplete="off"
              required
              disabled={form.category === 'cash_purchase'}
              style={form.category === 'cash_purchase' ? { background: '#e5e7eb', color: '#64748b', cursor: 'not-allowed' } : {}}
            />
            {showUserList && filteredUsers.length > 0 && (
              <div style={{
                position: 'absolute',
                top: '100%', left: 0, right: 0, zIndex: 20,
                background: '#fff', border: '1.5px solid #bae6fd', borderRadius: 8,
                boxShadow: '0 2px 12px #bae6fd22',
                maxHeight: 180, overflowY: 'auto', marginTop: 2
              }}>
                {userLoading ? (
                  <div style={{ padding: '10px 14px', color: '#64748b' }}>กำลังโหลด...</div>
                ) : filteredUsers.map(u => (
                  <div
                    key={u.id}
                    style={{ padding: '10px 14px', cursor: 'pointer', color: '#0ea5e9', fontWeight: 500 }}
                    onMouseDown={() => handleUserSelect(u)}
                  >{u.first_name} <span style={{color:'#64748b',fontWeight:400}}>({u.phone_number})</span></div>
                ))}
              </div>
            )}
            {!userLoading && userList.length === 0 && (
              <div style={{
                position: 'absolute',
                top: 0, left: 0, right: 0, bottom: 0,
                background: 'rgba(30,41,59,0.72)',
                color: '#fff',
                zIndex: 30,
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                fontSize: 18,
                fontWeight: 600,
                borderRadius: 8
              }}>
                ไม่พบข้อมูลในระบบ
              </div>
            )}
            {form.user_id && (
              <a
                href={`/admin/customers/${form.user_id}`}
                target="_blank"
                rel="noopener noreferrer"
                style={{
                  display: 'inline-block',
                  marginTop: 8,
                  color: '#0ea5e9',
                  fontWeight: 600,
                  fontSize: 15,
                  textDecoration: 'underline',
                  cursor: 'pointer',
                  background: 'none',
                  border: 'none',
                  padding: 0
                }}
              >ดูรายละเอียดลูกค้า</a>
            )}
          </div>
          <div style={{ position: 'relative' }}>
            <label>สินค้า <span className={styles.required}>*</span></label>
            <input
              type="text"
              name="product_name"
              value={productQuery}
              onChange={e => {
                setProductQuery(e.target.value);
                setShowProductList(true);
                setForm(prev => ({ ...prev, product_id: '' }));
              }}
              onFocus={() => setShowProductList(true)}
              onBlur={() => setShowProductList(false)}
              ref={productInputRef}
              className={styles.inputBox}
              placeholder="พิมพ์รหัสหรือชื่อสินค้า..."
              autoComplete="off"
              required
            />
            {showProductList && filteredProducts.length > 0 && (
              <div style={{
                position: 'absolute',
                top: '100%', left: 0, right: 0, zIndex: 20,
                background: '#fff', border: '1.5px solid #bae6fd', borderRadius: 8,
                boxShadow: '0 2px 12px #bae6fd22',
                maxHeight: 180, overflowY: 'auto', marginTop: 2
              }}>
                {productLoading ? (
                  <div style={{ padding: '10px 14px', color: '#64748b' }}>กำลังโหลด...</div>
                ) : filteredProducts.map(p => (
                  <div
                    key={p.id}
                    style={{ padding: '10px 14px', cursor: 'pointer', color: '#0ea5e9', fontWeight: 500 }}
                    onMouseDown={() => handleProductSelect(p)}
                  >{p.id} - {p.model_name}</div>
                ))}
              </div>
            )}
            {!productLoading && productList.length === 0 && (
              <div style={{
                position: 'absolute',
                top: 0, left: 0, right: 0, bottom: 0,
                background: 'rgba(30,41,59,0.72)',
                color: '#fff',
                zIndex: 30,
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                fontSize: 18,
                fontWeight: 600,
                borderRadius: 8
              }}>
                ไม่พบข้อมูลในระบบ
              </div>
            )}
            {form.product_id && (
              <a
                href={`/admin/products/${form.product_id}`}
                target="_blank"
                rel="noopener noreferrer"
                style={{
                  display: 'inline-block',
                  marginTop: 8,
                  color: '#0ea5e9',
                  fontWeight: 600,
                  fontSize: 15,
                  textDecoration: 'underline',
                  cursor: 'pointer',
                  background: 'none',
                  border: 'none',
                  padding: 0
                }}
              >ดูรายละเอียดสินค้า</a>
            )}
          </div>
          <div>
            <label>ประเภท <span className={styles.required}>*</span></label>
            <select name="category" value={form.category} onChange={handleChange} required className={styles.inputBox}>
              {categoryOptions.map(opt => <option key={opt.value} value={opt.value}>{opt.label}</option>)}
            </select>
          </div>
          <div>
            <label>ราคาสินค้า <span className={styles.required}>*</span></label>
            <input name="total_price" type="number" value={form.total_price} onChange={handleChange} 
              required min={0} className={styles.inputBox} 
            />
          </div>
          {form.category === 'rent' && (
            <>
          <div>
            <label>ราคารวมดอกเบี้ย <span className={styles.required}>*</span></label>
            <input name="total_with_interest" type="number" value={form.total_with_interest} onChange={handleChange} 
              required min={0} className={styles.inputBox} 
            />
          </div>
          <div>
            <label>เงินดาวน์ <span className={styles.required}>*</span></label>
            <input name="down_payment_amount" type="number" value={form.down_payment_amount} onChange={handleChange}
              min={0} className={styles.inputBox}
              required />
          </div>
          <div>
            <label>ค่าเช่า/ผ่อน (คำนวณอัตโนมัติ)</label>
            <input name="rental_cost" type="number" value={form.rental_cost} readOnly disabled
              min={0} className={styles.inputBox}
              placeholder="ระบบคำนวณอัตโนมัติ" />
          </div>
          <div>
            <label>จำนวนงวดผ่อน <span className={styles.required}>*</span></label>
            <input name="installment_months" type="number" value={form.installment_months} onChange={handleChange}
              required min={1} max={24} className={styles.inputBox}
            />
          </div>
          <div>
            <label>ยอดผ่อนต่อเดือน <span className={styles.required}>*</span></label>
            <input name="monthly_payment" type="number" value={form.monthly_payment} onChange={handleChange} 
              required min={0} step="0.01" className={styles.inputBox} 
            />
            <div style={{ 
              fontSize: '12px', 
              color: '#64748b', 
              marginTop: '4px',
              fontStyle: 'italic'
            }}>
              💡 คำนวณจาก: ค่าเช่า/ผ่อน ÷ จำนวนงวด
            </div>
          </div>
          <div>
            <label>สถานะ <span className={styles.required}>*</span></label>
            <select
              name="status"
              value={form.status}
              onChange={handleChange}
              required
              className={styles.inputBox}
            >
              {statusOptions.map(opt => <option key={opt.value} value={opt.value}>{opt.label}</option>)}
            </select>
          </div>
          <div>
            <label>วันที่เริ่ม <span className={styles.required}>*</span></label>
            <input name="start_date" type="date" value={form.start_date} onChange={handleChange} 
              required className={styles.inputBox} 
            />
          </div>
          <div>
            <label>วันที่สิ้นสุด <span className={styles.required}>*</span></label>
            <input name="end_date" type="date" value={form.end_date} onChange={handleChange} 
              required className={styles.inputBox} 
            />
          </div>
          <ContractFileTypeSelector 
            selectedType={contractFileType}
            onTypeChange={handleContractFileTypeChange}
          />
          
          {/* แสดงสถานะเลขคำสั่งซื้อ */}
          {autoGeneratedContractId && (
            <div style={{ 
              padding: '12px 16px', 
              background: '#f0f9ff', 
              border: '1px solid #bae6fd', 
              borderRadius: '8px',
              marginBottom: '16px'
            }}>
              <div style={{ 
                display: 'flex', 
                alignItems: 'center', 
                gap: '8px',
                color: '#0ea5e9',
                fontWeight: '600',
                fontSize: '14px',
                marginBottom: '4px'
              }}>
                <span style={{ fontSize: '16px' }}>📋</span>
                เลขคำสั่งซื้อในระบบ
              </div>
              <div style={{ 
                color: '#64748b', 
                fontSize: '13px',
                fontFamily: 'monospace',
                background: '#fff',
                padding: '6px 10px',
                borderRadius: '4px',
                border: '1px solid #e2e8f0'
              }}>
                {autoGeneratedContractId}
              </div>
              <div style={{ 
                fontSize: '12px', 
                color: '#64748b', 
                marginTop: '6px',
                fontStyle: 'italic'
              }}>
                💡 เลขคำสั่งซื้อนี้จะถูกใช้ในการบันทึกข้อมูล
              </div>
              <div style={{ 
                fontSize: '11px', 
                color: '#f59e0b', 
                marginTop: '4px',
                fontWeight: '500'
              }}>
                ⚠️ หากมีปัญหา ให้ใช้ "กรอกเลขคำสั่งซื้อเอง"
              </div>
            </div>
          )}
          
          {contractFileType === 'upload' && (
            <ContractFileUpload
              file={form.pdpa_consent_file}
              onFileChange={handleFileChange}
              fileInputRef={fileInputRef}
              hasExistingContractId={!!autoGeneratedContractId}
            />
          )}
          {contractFileType === 'auto' && (
            <AutoContractGenerator 
              contractData={form} 
              onPdfGenerated={handlePdfGenerated}
              existingContractId={autoGeneratedContractId}
            />
          )}
          {contractFileType === 'manual' && (
            <ManualContractInput
              contractId={manualContractId}
              onContractIdChange={setManualContractId}
              onFileChange={handleFileChange}
              file={form.pdpa_consent_file}
              fileInputRef={fileInputRef}
            />
          )}
            </>
          )}
          <div className={styles.buttonRow}>
            <button type="submit" className={styles.submitBtn} disabled={isSubmitDisabled()}>
              {isSubmitting ? 'กำลังบันทึก...' : (
                !hasValidFile() ? 'กรุณาเลือกไฟล์' : (
                  contractFileType === 'manual' ? 'อัปเดตคำสั่งซื้อ' : (
                    autoGeneratedContractId && contractFileType === 'upload' ? 'อัปเดตคำสั่งซื้อ' : 'บันทึก'
                  )
                )
              )}
            </button>
            <button type="button" className={styles.cancelBtn} onClick={handleClose}>ยกเลิก</button>
          </div>
        </form>
      </div>
      {showConfirmModal && confirmModalConfig && (
        <div className={styles.confirmModalBackdrop}>
          <div className={styles.confirmModalContent}>
            <div style={{ 
              fontSize: '48px', 
              marginBottom: '16px',
              color: '#ef4444'
            }}>
              ⚠️
            </div>
            <h3>{confirmModalConfig.title}</h3>
            <p style={{ 
              whiteSpace: 'pre-line',
              textAlign: 'center',
              background: '#f8fafc',
              padding: '16px',
              borderRadius: '8px',
              border: '1px solid #e2e8f0',
              fontSize: '14px',
              lineHeight: '1.6'
            }}>
              {confirmModalConfig.message}
            </p>
            <div className={styles.confirmModalButtons}>
              <button 
                onClick={() => {
                  setShowConfirmModal(false);
                  setConfirmModalConfig(null);
                }} 
                className={styles.cancelBtn}
                style={{ background: '#f3f4f6', color: '#374151', border: '1px solid #d1d5db' }}
              >
                {confirmModalConfig.cancelText}
              </button>
              <button 
                onClick={confirmModalConfig.onConfirm} 
                className={styles.confirmBtn}
                style={{ 
                  background: 'linear-gradient(135deg, #ef4444 0%, #dc2626 100%)',
                  color: '#fff',
                  boxShadow: '0 4px 12px rgba(239, 68, 68, 0.3)'
                }}
              >
                {confirmModalConfig.confirmText}
              </button>
            </div>
          </div>
        </div>
      )}
      {showContractIdErrorModal && (
        <ContractIdErrorModal
          open={showContractIdErrorModal}
          onClose={() => setShowContractIdErrorModal(false)}
          onSwitchToManual={() => {
            setContractFileType('manual');
            setManualContractId('');
            setForm(prev => ({ ...prev, pdpa_consent_file: null }));
            if (fileInputRef.current) {
              fileInputRef.current.value = '';
            }
          }}
        />
      )}
    </div>
  );
};

export default OrderCreateModal; 