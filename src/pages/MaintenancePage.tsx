import React, { useState, useEffect } from 'react';
import styles from './MaintenancePage.module.css';
import { useMaintenance } from '../hooks/useMaintenance';
import { DOMAINS } from '../utils/domains';
import { getPortalMaintenance } from '../services/portal-maintenance.service';

const MaintenancePage: React.FC = () => {
  const { estimatedCompletionTime } = useMaintenance();
  const [currentGifIndex, setCurrentGifIndex] = useState(0);
  const [isFading, setIsFading] = useState(false);
  const [progress, setProgress] = useState(0);
  const [loopProgress, setLoopProgress] = useState(0);
  
  // ‡πÅ‡∏¢‡∏Å remark ‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏°‡∏ß‡∏î‡πÜ
  const parseMaintenanceInfo = (description: string | undefined) => {
    if (!description) return { time: '‡πÄ‡∏£‡πá‡∏ß‡πÜ‡∏ô‡∏µ‡πâ', remark: '', isDeploy: false };
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ deploy
    const isDeploy = description.toLowerCase().includes('deploy');
    
    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ format "time / remark"
    if (description.includes(' / ')) {
      const [time, remark] = description.split(' / ');
      return { time: time.trim(), remark: remark.trim(), isDeploy };
    }
    
    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ format ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ description ‡πÄ‡∏õ‡πá‡∏ô remark
    return { time: '‡πÄ‡∏£‡πá‡∏ß‡πÜ‡∏ô‡∏µ‡πâ', remark: description, isDeploy };
  };
  
  const maintenanceInfo = parseMaintenanceInfo(estimatedCompletionTime);
  
  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠
  const calculateTimeRemaining = () => {
    if (maintenanceInfo.time === '‡πÄ‡∏£‡πá‡∏ß‡πÜ‡∏ô‡∏µ‡πâ') return null;
    
    try {
      const now = new Date();
      const [hours, minutes] = maintenanceInfo.time.split(':').map(Number);
      const targetTime = new Date();
      targetTime.setHours(hours, minutes, 0, 0);
      
      // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡πÑ‡∏ß‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
      if (targetTime <= now) {
        targetTime.setDate(targetTime.getDate() + 1);
      }
      
      return targetTime.getTime() - now.getTime();
    } catch {
      return null;
    }
  };
  
  const timeRemaining = calculateTimeRemaining();
  
  // Progress bar animation - ‡∏≠‡∏¥‡∏á‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏£‡∏¥‡∏á
  useEffect(() => {
    if (maintenanceInfo.isDeploy) {
      // ‡∏´‡∏ô‡πâ‡∏≤ Deploy ‡πÉ‡∏ä‡πâ 10 ‡∏ô‡∏≤‡∏ó‡∏µ
      const duration = 10 * 60 * 1000;
      const interval = 100;
      const increment = (interval / duration) * 100;
      
      const timer = setInterval(() => {
        setProgress(prev => {
          if (prev >= 100) return 100;
          return Math.min(prev + increment, 100);
        });
      }, interval);

      return () => clearInterval(timer);
    } else {
      // ‡∏´‡∏ô‡πâ‡∏≤ Maintenance ‡∏≠‡∏¥‡∏á‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏£‡∏¥‡∏á
      if (maintenanceInfo.time === '‡πÄ‡∏£‡πá‡∏ß‡πÜ‡∏ô‡∏µ‡πâ') {
        // Loop ‡πÇ‡∏´‡∏•‡∏î 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        const timer = setInterval(() => {
          setLoopProgress(prev => {
            if (prev >= 100) {
              // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ñ‡∏∂‡∏á 100% ‡πÉ‡∏´‡πâ‡∏¢‡∏¥‡∏á API ‡πÄ‡∏ä‡πá‡∏Ñ
              getPortalMaintenance().then(response => {
                if (response && response.value === 'false') {
                  // ‡∏ñ‡πâ‡∏≤ maintenance mode ‡∏´‡∏¢‡∏∏‡∏î‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏´‡∏ô‡πâ‡∏≤
                  window.location.reload();
                }
              }).catch(error => {
                console.error("Error fetching portal maintenance status:", error);
              });
              return 0;
            }
            return prev + 10;
          });
        }, 1000);

        return () => clearInterval(timer);
      } else if (timeRemaining) {
        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏£‡∏¥‡∏á
        const interval = 1000; // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ó‡∏∏‡∏Å 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        const startTime = Date.now();
        
        const timer = setInterval(() => {
          const now = Date.now();
          const elapsed = now - startTime;
          const newProgress = Math.min((elapsed / timeRemaining) * 100, 100);
          setProgress(newProgress);
          
          if (newProgress >= 100) {
            clearInterval(timer);
          }
        }, interval);

        return () => clearInterval(timer);
      }
    }
  }, [maintenanceInfo.isDeploy, maintenanceInfo.time, timeRemaining]);
  
  // Auto refresh ‡∏ó‡∏∏‡∏Å 1 ‡∏ô‡∏≤‡∏ó‡∏µ ‡∏ï‡∏•‡∏≠‡∏î 10 ‡∏ô‡∏≤‡∏ó‡∏µ (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà "‡πÄ‡∏£‡πá‡∏ß‡πÜ‡∏ô‡∏µ‡πâ" ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà deploy)
  useEffect(() => {
    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô "‡πÄ‡∏£‡πá‡∏ß‡πÜ‡∏ô‡∏µ‡πâ" ‡∏´‡∏£‡∏∑‡∏≠ deploy ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ
    if (maintenanceInfo.time === '‡πÄ‡∏£‡πá‡∏ß‡πÜ‡∏ô‡∏µ‡πâ' || maintenanceInfo.isDeploy) return;
    
    const interval = setInterval(() => {
      getPortalMaintenance().then(response => {
        if (response && response.value === 'false') {
          // ‡∏ñ‡πâ‡∏≤ maintenance mode ‡∏´‡∏¢‡∏∏‡∏î‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏´‡∏ô‡πâ‡∏≤
          window.location.reload();
        }
      }).catch(error => {
        console.error("Error fetching portal maintenance status:", error);
      });
    }, 60000); // 1 ‡∏ô‡∏≤‡∏ó‡∏µ

    return () => clearInterval(interval);
  }, [maintenanceInfo.time, maintenanceInfo.isDeploy]);
  
  // Fetch API ‡∏ó‡∏∏‡∏Å 1 ‡∏ô‡∏≤‡∏ó‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÄ‡∏ß‡∏•‡∏≤‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå
  useEffect(() => {
    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô "‡πÄ‡∏£‡πá‡∏ß‡πÜ‡∏ô‡∏µ‡πâ" ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏°‡∏µ loop progress bar ‡πÅ‡∏•‡πâ‡∏ß
    if (maintenanceInfo.time === '‡πÄ‡∏£‡πá‡∏ß‡πÜ‡∏ô‡∏µ‡πâ') return;
    
    const interval = setInterval(() => {
      getPortalMaintenance().then(response => {
        if (response && response.value === 'false') {
          // ‡∏ñ‡πâ‡∏≤ maintenance mode ‡∏´‡∏¢‡∏∏‡∏î‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏´‡∏ô‡πâ‡∏≤
          window.location.reload();
        }
      }).catch(error => {
        console.error("Error fetching portal maintenance status:", error);
      });
    }, 60000); // 1 ‡∏ô‡∏≤‡∏ó‡∏µ

    return () => clearInterval(interval);
  }, [maintenanceInfo.time]);
  
  // ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ GIF ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡∏•‡∏±‡∏ö (‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)
  const gifList = [
    '/gif/1ed2f24a0444ee7a3f59f6aaa5f9d092.gif',
    '/gif/45fa006df254a8e567151c27ade0b31e.gif',
    '/gif/fc504576b225dddb40e38ba7c05a5bf4.gif',
    '/gif/001d2f18b6d27dbd36191d66064bef6f.gif',
    '/gif/a4cd4d37d90e1185047d4bc59e0ce52d.gif'
  ];

  useEffect(() => {
    // ‡∏™‡∏•‡∏±‡∏ö GIF ‡∏ó‡∏∏‡∏Å 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    const interval = setInterval(() => {
      setIsFading(true);
      
      // ‡∏£‡∏≠‡πÉ‡∏´‡πâ fade out ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô GIF
      setTimeout(() => {
        setCurrentGifIndex(prev => (prev + 1) % gifList.length);
        setIsFading(false);
      }, 300); // ‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏Ç‡∏≠‡∏á fade duration
      
    }, 3000);

    return () => clearInterval(interval);
  }, [gifList.length]);

  return (
    <div className={styles.maintenanceContainer}>
      {/* ‡πÅ‡∏™‡∏î‡∏á Deploy Modal ‡πÅ‡∏ó‡∏ô‡∏´‡∏ô‡πâ‡∏≤ maintenance ‡∏õ‡∏Å‡∏ï‡∏¥ */}
      {maintenanceInfo.isDeploy ? (
        <div className={styles.maintenanceContent}>
          <div className={styles.maintenanceIcon}>
            <div style={{
              fontSize: 80,
              animation: 'pulse 2s infinite',
              display: 'flex',
              justifyContent: 'center',
              alignItems: 'center',
              height: 120
            }}>
              üöÄ
            </div>
          </div>
          <h1 className={styles.maintenanceTitle}>‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó</h1>
          <p className={styles.maintenanceMessage}>
            ‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡πÉ‡∏´‡∏°‡πà
            <br />
            ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡πÑ‡∏°‡πà‡∏ä‡πâ‡∏≤
          </p>
          
          {/* Progress Bar */}
          <div style={{
            width: '100%',
            maxWidth: 400,
            margin: '20px auto',
            background: '#f1f5f9',
            borderRadius: 10,
            overflow: 'hidden',
            boxShadow: 'inset 0 2px 4px rgba(0,0,0,0.1)'
          }}>
            <div style={{
              width: `${Math.min(progress, 100)}%`,
              height: 8,
              background: 'linear-gradient(90deg, #0ea5e9, #06b6d4, #0891b2)',
              borderRadius: 10,
              transition: 'width 0.5s ease-in-out',
              position: 'relative',
              overflow: 'hidden'
            }}>
              <div style={{
                position: 'absolute',
                top: 0,
                left: 0,
                right: 0,
                bottom: 0,
                background: 'linear-gradient(90deg, transparent, rgba(255,255,255,0.4), transparent)',
                animation: 'shimmer 2s infinite'
              }}></div>
            </div>
          </div>
          
          {/* Progress Text */}
          <div style={{
            fontSize: 14,
            color: '#0ea5e9',
            fontWeight: 600,
            marginBottom: 20
          }}>
            ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤: {Math.round(progress)}% (‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤ 10 ‡∏ô‡∏≤‡∏ó‡∏µ)
          </div>
          
          <div className={styles.maintenanceInfo}>
            <p>‚è±Ô∏è ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô: {maintenanceInfo.time}</p>
            {maintenanceInfo.remark && (
              <p>üìù ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: {maintenanceInfo.remark}</p>
            )}
            <p>üìß ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°: {DOMAINS.SUPPORT_EMAIL}</p>
          </div>
          <button 
            className={styles.retryButton}
            onClick={() => window.location.reload()}
          >
            üîÑ ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏´‡∏ô‡πâ‡∏≤
          </button>
        </div>
      ) : (
        /* ‡∏´‡∏ô‡πâ‡∏≤ Maintenance ‡∏õ‡∏Å‡∏ï‡∏¥ */
        <div className={styles.maintenanceContent}>
          <div className={styles.maintenanceIcon}>
            <img 
              src={gifList[currentGifIndex]}
              alt="Maintenance Animation"
              className={`${styles.maintenanceGif} ${isFading ? styles.fadeOut : styles.fadeIn}`}
              key={currentGifIndex}
            />
          </div>
          <h1 className={styles.maintenanceTitle}>‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ã‡πà‡∏≠‡∏°‡∏ö‡∏≥‡∏£‡∏∏‡∏á</h1>
          <p className={styles.maintenanceMessage}>
            ‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ã‡πà‡∏≠‡∏°‡∏ö‡∏≥‡∏£‡∏∏‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£
            <br />
            ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÉ‡∏ô‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á
          </p>
          
          {/* Progress Bar */}
          <div style={{
            width: '100%',
            maxWidth: 400,
            margin: '20px auto',
            background: '#f1f5f9',
            borderRadius: 10,
            overflow: 'hidden',
            boxShadow: 'inset 0 2px 4px rgba(0,0,0,0.1)'
          }}>
            <div style={{
              width: `${maintenanceInfo.time === '‡πÄ‡∏£‡πá‡∏ß‡πÜ‡∏ô‡∏µ‡πâ' ? loopProgress : Math.min(progress, 100)}%`,
              height: 8,
              background: 'linear-gradient(90deg, #f59e0b, #f97316, #ea580c)',
              borderRadius: 10,
              transition: 'width 0.5s ease-in-out',
              position: 'relative',
              overflow: 'hidden'
            }}>
              <div style={{
                position: 'absolute',
                top: 0,
                left: 0,
                right: 0,
                bottom: 0,
                background: 'linear-gradient(90deg, transparent, rgba(255,255,255,0.4), transparent)',
                animation: 'shimmer 2s infinite'
              }}></div>
            </div>
          </div>
          
          {/* Progress Text */}
          <div style={{
            fontSize: 14,
            color: '#f59e0b',
            fontWeight: 600,
            marginBottom: 20
          }}>
            {maintenanceInfo.time === '‡πÄ‡∏£‡πá‡∏ß‡πÜ‡∏ô‡∏µ‡πâ' ? (
              '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î... ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≥‡∏´‡∏ô‡∏î'
            ) : (
              `‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤: ${Math.round(progress)}% (‡∏ñ‡∏∂‡∏á ${maintenanceInfo.time})`
            )}
          </div>
          
          <div className={styles.maintenanceInfo}>
            <p>‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô: {maintenanceInfo.time}</p>
            {maintenanceInfo.remark && (
              <p>üìù ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: {maintenanceInfo.remark}</p>
            )}
            <p>üìß ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°: {DOMAINS.SUPPORT_EMAIL}</p>
          </div>
          <button 
            className={styles.retryButton}
            onClick={() => window.location.reload()}
          >
            ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
          </button>
        </div>
      )}
    </div>
  );
};

export default MaintenancePage; 